input$filters
filters <- if (is.null(data_extract_spec$keys_filtering)) {
NULL
} else {
list(
columns=data_extract_spec$keys_filtering$vars,
selected=split_by_sep(input$filters, " - ")
)
}
runApp('tests/testthat/app')
data <- get_data_with_keys(datasets = datasets, dataname = dataname)
selected_data_extract_spec <- find_with_attribute_value(data_extract_spec, "dataname", dataname)
filter_and_columns <- callModule(data_extract_single_module, id=id_for_dataset(dataname), data_extract_spec = selected_data_extract_spec)
filter_and_columns()
runApp('tests/testthat/app')
data <- get_data_with_keys(datasets = datasets, dataname = dataname)
selected_data_extract_spec <- find_with_attribute_value(data_extract_spec, "dataname", dataname)
filter_and_columns <- callModule(data_extract_single_module, id=id_for_dataset(dataname), data_extract_spec = selected_data_extract_spec)
filter_and_columns()
devtools::load_all(".")
runApp('tests/testthat/app')
data
filters
columns
old_keys <- attr(data, "keys")
new_keys <- setdiff(old_keys, filters$variable_names)
if (!is.null(filters$selected)) {
# e.g. rlang::parse_expr("PARAMCD == 'CRP' & AVISIT == 'BASELINE'")
# parses the string into an expression for use with !!filter_str
filter_str <- rlang::parse_expr(get_keysfilter_str(filters))
data %<>%
filter(!!filter_str)
}
data %<>%
select(c(new_keys, columns))
attr(data, "keys") <- new_keys
attr(data, "dataname") <- dataname
data
filter_str
get_keysfilter_str(filters)
filters
devtools::load_all(".")
runApp('tests/testthat/app')
filters$variable_names
runApp('tests/testthat/app')
data
filters$columns
old_keys <- attr(data, "keys")
new_keys <- setdiff(old_keys, filters$columns)
get_keysfilter_str(filters)
if (!is.null(filters$selected)) {
# e.g. rlang::parse_expr("PARAMCD == 'CRP' & AVISIT == 'BASELINE'")
# parses the string into an expression for use with !!filter_str
filter_str <- rlang::parse_expr(get_keysfilter_str(filters))
data %<>%
filter(!!filter_str)
}
data %<>%
select(c(new_keys, columns))
attr(data, "keys") <- new_keys
attr(data, "dataname") <- dataname
data
names(data)
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
regressor_data()
merge_datasets(regressor_data(), response_data())
regressor_data()
names(regressor_data())
names(response_data())
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
dataset_selection <- helpText("Dataset:", tags$code(dataset_names[1]))
conditional_singledatasetview_chooser <- function(single_data_extract_spec) {
dataname <- single_data_extract_spec$dataname
conditionalPanel(
#todo: paste properly with quotes
condition = paste0("input['", ns("dataset"), "'] == '", dataname, "'"),
data_extract_input_single(ns(id_for_dataset(dataname)), single_data_extract_spec)
)
}
div(dataset_selection,
do.call(div, unname(lapply(data_extract_spec, conditional_singledatasetview_chooser)))
)
runApp('tests/testthat/app')
response_data()
regressor_data()
merge_datasets(regressor_data(), response_data())
get_dataset_prefixed_col_names(regressor_data())
get_dataset_prefixed_col_names(response_data())
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
div(dataset_selection,
do.call(div, unname(lapply(data_extract_spec, conditional_singledatasetview_chooser)))
)
devtools::load_all(".")
runApp('tests/testthat/app')
div(dataset_selection,
do.call(div, unname(lapply(data_extract_spec, conditional_singledatasetview_chooser)))
)
div(dataset_selection,
do.call(div, unname(lapply(data_extract_spec, conditional_singledatasetview_chooser)))
)
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
label
?callModule
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
label
label
dataset_selection
div(dataset_selection,
do.call(div, unname(lapply(data_extract_spec, conditional_singledatasetview_chooser)))
)
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
div(dataset_selection,
do.call(div, unname(lapply(data_extract_spec, conditional_singledatasetview_chooser)))
)
devtools::load_all(".")
runApp('tests/testthat/app')
single_data_extract_spec <- get_list_index(data_extract_spec, 1)
single_data_extract_spec
do.call(div,
helpText("Dataset:", tags$code(single_data_extract_spec$dataname)),
data_extract_input_single(id=ns(id_for_dataset(dataname)), single_data_extract_spec=single_data_extract_spec)
)
single_data_extract_spec$dataname
single_data_extract_spec <- get_list_index(data_extract_spec, 1)
dataname <- single_data_extract_spec$dataname
do.call(div,
helpText("Dataset:", tags$code(dataname)),
data_extract_input_single(id=ns(id_for_dataset(dataname)), single_data_extract_spec=single_data_extract_spec)
)
single_data_extract_spec
dataname
helpText("Dataset:", tags$code(dataname))
data_extract_input_single(id=ns(id_for_dataset(dataname)), single_data_extract_spec=single_data_extract_spec)
do.call(div,
helpText("Dataset:", tags$code(dataname)),
data_extract_input_single(id=ns(id_for_dataset(dataname)), single_data_extract_spec=single_data_extract_spec)
)
do.call(div,
helpText("Dataset:", tags$code(dataname)),
data_extract_input_single(id=ns(id_for_dataset(dataname)), single_data_extract_spec=single_data_extract_spec)
)
data_extract_input_single(id=ns(id_for_dataset(dataname)), single_data_extract_spec=single_data_extract_spec)
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
single_data_extract_spec <- get_list_index(data_extract_spec, 1)
dataname <- single_data_extract_spec$dataname
single_data_extract_spec
dataname
div(
helpText("Dataset:", tags$code(dataname)),
data_extract_input_single(id=ns(id_for_dataset(dataname)), single_data_extract_spec=single_data_extract_spec)
)
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
filters <- if (is.null(single_data_extract_spec$keys_filtering)) {
NULL
} else {
list(
columns=single_data_extract_spec$keys_filtering$vars,
selected=split_by_sep(input$filters, " - ")
)
}
runApp('tests/testthat/app')
single_data_extract_spec$keys_filtering
single_data_extract_spec$keys_filtering$vars
split_by_sep(input$filters, " - ")
input$filters
input$columns
input$columns
list(filters = filters, columns = columns)
filters <- if (is.null(single_data_extract_spec$keys_filtering)) {
NULL
} else {
list(
columns=single_data_extract_spec$keys_filtering$vars,
selected=split_by_sep(input$filters, " - ")
)
}
columns <- if (is.null(input$columns)) {
single_data_extract_spec$columns$selected
} else {
input$columns
}
list(filters = filters, columns = columns)
filters <- if (is.null(single_data_extract_spec$keys_filtering)) {
NULL
} else {
list(
columns=single_data_extract_spec$keys_filtering$vars,
selected=split_by_sep(input$filters, " - ")
)
}
is.null(single_data_extract_spec$keys_filtering)
list(
columns=single_data_extract_spec$keys_filtering$vars,
selected=split_by_sep(input$filters, " - ")
)
filters <- list(
columns=single_data_extract_spec$keys_filtering$vars,
selected=split_by_sep(input$filters, " - ")
)
columns <- if (is.null(input$columns)) {
single_data_extract_spec$columns$selected
} else {
input$columns
}
columns <- if (is.null(input$columns)) {
single_data_extract_spec$columns$selected
} else {
input$columns
}
list(filters = filters, columns = columns)
list(filters = filters, columns = columns)
devtools::load_all(".")
runApp('tests/testthat/app')
merge_datasets(regressor_data(), response_data())
names(merge_datasets(regressor_data(), response_data()))
names(merge_datasets(regressor_data(), response_data()))
response_data()
names(response_data())
devtools::load_all(".")
runApp('tests/testthat/app')
filter_and_columns()
filter_and_columns()
filter_and_columns()
data
names(data)
devtools::load_all(".")
runApp('tests/testthat/app')
new_keys
old_keys
if (!is.null(filters$selected)) {
# e.g. rlang::parse_expr("PARAMCD == 'CRP' & AVISIT == 'BASELINE'")
# parses the string into an expression for use with !!filter_str
filter_str <- rlang::parse_expr(get_keysfilter_str(filters))
data %<>%
filter(!!filter_str)
}
devtools::load_all(".")
runApp('tests/testthat/app')
merge_datasets(regressor_data(), response_data())
regressor_data()
response_data()
devtools::load_all(".")
runApp('tests/testthat/app')
overwrite_names
names(data)
names(data)[which(names(data) %in% names(overwrite_names))]
names(data)[which(names(data) %in% names(overwrite_names))]
overwrite_names
devtools::load_all(".")
runApp('tests/testthat/app')
y_row_id_col_name
x %>% arrange(!!y_row_id_col_name)
names(x)
y_row_id_col_name_expr <- rlang::parse_expr(y_row_id_col_name)
x %>% arrange(!!y_row_id_col_name_expr)
devtools::load_all(".")
runApp('tests/testthat/app')
rowid_columns
merged_data %<>% select(-!!rowid_columns)
runApp('tests/testthat/app')
merged_data %>% select(-!!rowid_columns)
names(merged_data %>% select(-!!rowid_columns))
names(merged_data)
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::test()
test_that("app can be interacted without error", {
# set numeric input
app$snapshotInit("mytest")
app$setInputs(`teal_modules.root` = "Qplot")
app$setInputs(`teal_modules_root.Qplot-regressor-ADTE-filter` = c("OS", "PFS"))
app$setInputs(`teal_modules_root.Qplot-response-ADTE-column` = "BMRKR1")
app$setInputs(`teal_modules_root.Qplot-regressor-ADTE-column` = "AVALU")
app$snapshot()
output <- app$findElement(css = "#teal_modules_root\\.Qplot-outtext")$getText()
# test
expect_equal(output, "ADTE.AVALU")
output <- app$findElement(css = "#teal_modules_root\\.Qplot-outtext_response")$getText()
# test
expect_equal(output, "ADTE.BMRKR1")
})
library(shinytest)
library(testthat)
install.packages("shinytest")
install.packages(c("rvest", "xml2"))
library(shinytest)
shinytest::installDependencies()
shinytest::installDependencies()
shinytest::installDependencies()
shinytest::installDependencies()
shinytest::installDependencies()
context("Test shiny app")
# open shiny app
app <- ShinyDriver$new(path = "app", loadTimeout = 100000, debug = "all")
library(shinytest) # needs shinytest::installDependencies() as well for headless browser
library(testthat)
library(testthat)
context("Test shiny app")
# open shiny app
app <- ShinyDriver$new(path = "app", loadTimeout = 100000, debug = "all")
shinytest::installDependencies()
shinytest::installDependencies()
library(shinytest) # needs shinytest::installDependencies() for headless browser (execute as root, before run mkdir /root/bin/phantomjs)
library(testthat)
context("Test shiny app")
# open shiny app
app <- ShinyDriver$new(path = "app", loadTimeout = 100000, debug = "all")
library(shinytest) # needs shinytest::installDependencies() for headless browser (execute as root, before run mkdir /root/bin/phantomjs)
library(testthat)
context("Test shiny app")
# open shiny app
app <- ShinyDriver$new(path = "app", loadTimeout = 100000, debug = "all")
# open shiny app
app <- ShinyDriver$new(path = "app", loadTimeout = 100000, debug = "all")
install_github("rstudio/shinytest")
devtools::install_github("rstudio/shinytest")
library(shinytest) # needs shinytest::installDependencies() for headless browser (execute as root, before run mkdir /root/bin/phantomjs)
library(shinytest) # needs shinytest::installDependencies() for headless browser (execute as root, before run mkdir /root/bin/phantomjs)
library(testthat)
context("Test shiny app")
# open shiny app
app <- ShinyDriver$new(path = "app", loadTimeout = 100000, debug = "all")
devtools::check()
devtools::install_github(
'NEST/test.nest',
ref = "devel",
host = 'https://github.roche.com/api/v3',
upgrade_dependencies = FALSE,
build_vignettes = TRUE
)
devtools::install_github(
repo = "NEST/test.nest",
host = "https://github.roche.com/api/v3"
)
install.packages("strict")
devtools::install_github("hadley/strict")
devtools::install_github(
'NEST/test.nest',
ref = "devel",
host = 'https://github.roche.com/api/v3',
upgrade_dependencies = FALSE,
build_vignettes = TRUE
)
?full_join
devtools::document()
devtools::check(args="--no-test")
test.nest::test_lintr()
?rbindlist
test.nest::test_lintr()
test.nest::test_lintr()
test.nest::test_lintr()
test.nest::test_lintr()
test.nest::test_lintr()
test.nest::test_lintr()
test.nest::test_lintr()
test.nest::test_lintr()
?get_open_file
??get_open_file
test.nest::test_lintr(rstudioapi::getSourceEditorContext()$path)
rstudioapi::getSourceEditorContext()$path
lintr::lint(rstudioapi::getSourceEditorContext()$path)
test.nest::test_lintr()
test.nest::test_lintr()
test.nest::test_lintr()
test.nest::test_lintr()
test.nest::test_lintr()
install.packages("styler")
library(styler)
style_file(rstudioapi::getSourceEditorContext()$path)
test.nest::test_lintr()
style_file(rstudioapi::getSourceEditorContext()$path)
test.nest::test_lintr()
style_file(rstudioapi::getSourceEditorContext()$path)
test.nest::test_lintr()
test.nest::test_lintr()
test.nest::test_lintr()
test.nest::test_lintr()
style_file(rstudioapi::getSourceEditorContext()$path)
test.nest::test_lintr()
test.nest::test_lintr()
test.nest::test_lintr()
styler:::style_active_file()
test.nest::test_lintr()
test.nest::test_lintr()
test.nest::test_strict()
test.nest::test_strict()
devtools::check()
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
choices
selected
if (!multiple) {
stopifnot(length(selected) == 1 && length(choices) == 1)
}
length_selected <- length(selected[[1]])
has_same_length <- function(elem) {
length(elem) == length_selected
}
stopifnot(all_true(choices, has_same_length))
stopifnot(all_true(selected, has_same_length))
devtools::load_all(".")
runApp('tests/testthat/app')
if (!multiple) {
stopifnot(length(selected) == 1 && length(choices) == 1)
}
length_selected <- length(selected[[1]])
has_same_length <- function(elem) {
length(elem) == length_selected
}
stopifnot(all_true(choices, has_same_length))
stopifnot(all_true(selected, has_same_length))
devtools::load_all(".")
runApp('tests/testthat/app')
columns
runApp('tests/testthat/app')
columns
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
if (!multiple) {
stopifnot(length(selected) == 1 && length(choices) == 1)
}
length_selected <- length(selected[[1]])
has_same_length <- function(elem) {
length(elem) == length_selected
}
stopifnot(all_true(choices, has_same_length))
runApp('tests/testthat/app')
runApp('tests/testthat/app')
list(choices = choices, selected = selected, multiple = multiple, show = show, label = label, ...)
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
stopifnot(is.list(choices) && length(choices) >= 1 && all_true(choices, is.atomic))
choices
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
stopifnot(is.list(choices) && length(choices) >= 1 && all_true(choices, is.atomic))
stopifnot(is.list(selected) && length(selected) >= 1 && all_true(selected, is.atomic))
stopifnot(is.logical(multiple))
stopifnot(is.logical(show))
stopifnot(is.list(choices) && length(choices) >= 1 && all_true(choices, is.atomic))
stopifnot(is.list(selected) && length(selected) >= 1 && all_true(selected, is.atomic))
stopifnot(is.logical(multiple))
stopifnot(is.logical(show))
stopifnot(all(selected %in% choices)) # selected and choices must be a list to work correcty
# check for correct lengths
if (!multiple) {
stopifnot(length(selected) == 1 && length(choices) == 1)
}
selected
length(selected)
length(choices)
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
runApp('tests/testthat/app')
stopifnot(is.list(choices) && length(choices) >= 1 && all_true(choices, is.atomic))
choices
list(c(1,2))
list(1,2)
as.list(c(1,2))
as.list(list(1,2))
devtools::load_all(".")
runApp('tests/testthat/app')
runApp('tests/testthat/app')
# check for correct lengths
stopifnot(multiple || length(selected) == 1)
selected
choices
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
