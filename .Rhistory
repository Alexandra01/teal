install_github(
'NEST/random.cdisc.data',
ref = "devel",
host = 'https://github.roche.com/api/v3',
upgrade_dependencies = FALSE,
build_vignettes = TRUE
)
devtools::install_github(
'NEST/random.cdisc.data',
ref = "devel",
host = 'https://github.roche.com/api/v3',
upgrade_dependencies = FALSE,
build_vignettes = TRUE
)
devtools::install_github(
'NEST/teal',
ref = "devel",
host = 'https://github.roche.com/api/v3',
upgrade_dependencies = FALSE,
build_vignettes = TRUE
)
devtools::install_github(
'NEST/teal.devel',
ref = "devel",
host = 'https://github.roche.com/api/v3',
upgrade_dependencies = FALSE,
build_vignettes = TRUE,
auth_token = readLines("~/.github_token") # because private repo
)
from_source <- function(path_to_file) install.packages(path_to_file, repos = NULL, type="source")
download_dir <- "../scratch/install_packages"
from_source(file.path(download_dir, "teal.modules.clinical"))
getwd()
devtools::load_all(".")
runApp('tests/testthat/app')
data
selected_data_extract_spec <- find_with_attribute_value(data_extract_spec, "dataname", dataname)
find_with_attribute_value <- function(lst, attr_name, value) {
idxs <- which(vapply(lst, function(elem) identical(elem[[attr_name]], value), TRUE))
stopifnot(length(idxs) == 1)
lst[idxs]
}
selected_data_extract_spec <- find_with_attribute_value(data_extract_spec, "dataname", dataname)
selected_data_extract_spec
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
data <- get_data_with_keys(datasets = datasets, dataname = dataname)
data
selected_data_extract_spec
selected_data_extract_spec <- find_with_attribute_value(data_extract_spec, "dataname", dataname)
selected_data_extract_spec
filter_and_columns <- callModule(data_extract_single_module, dataname, data_extract_spec = selected_data_extract_spec)
data_filter_select(
input_data = data,
filters = filter_and_columns()$filters,
columns = filter_and_columns()$columns,
dataname = dataname
)
dataname
datasets
get_data_with_keys(datasets = datasets, dataname = dataname)
input
names(input)
data_extract_spec
data_extract_spec[1]
data_extract_spec[1]$dataname
data_extract_spec[[1]]$dataname
devtools::load_all(".")
runApp('tests/testthat/app')
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
isolate(merge_datasets(regressor_data(), response_data()))
get_dataset_prefixed_col_names(regressor_data())
regressor_data()
names(response_data())
runApp('tests/testthat/app')
runApp('tests/testthat/app')
runApp('tests/testthat/app')
runApp('tests/testthat/app')
data_extract_spec
stopifnot(is.list(data_extract_spec))
data_extract_spec
stopifnot(is.list(data_extract_spec))
all_true(data_extract_spec, function(elem) methods::is(elem, "DataExtractSpec"))
data_extract_spec
runApp('tests/testthat/app')
data_extract_spec
runApp('tests/testthat/app')
runApp('tests/testthat/app')
dataname
data <- get_data_with_keys(datasets = datasets, dataname = dataname)
selected_data_extract_spec <- find_with_attribute_value(data_extract_spec, "dataname", dataname)
selected_data_extract_spec
runApp('tests/testthat/app')
dataname
data <- get_data_with_keys(datasets = datasets, dataname = dataname)
selected_data_extract_spec <- find_with_attribute_value(data_extract_spec, "dataname", dataname)
selected_data_extract_spec
runApp('tests/testthat/app')
dataname
data
data <- get_data_with_keys(datasets = datasets, dataname = dataname)
data
selected_data_extract_spec <- find_with_attribute_value(data_extract_spec, "dataname", dataname)
selected_data_extract_spec
data_extract_spec
find_with_attribute_value <- function(lst, attr_name, value) {
browser()
idxs <- which(vapply(lst, function(elem) identical(elem[[attr_name]], value), TRUE))
get_list_index(lst, idxs)
}
find_with_attribute_value(data_extract_spec, "dataname", dataname)
which(vapply(lst, function(elem) identical(elem[[attr_name]], value), TRUE))
get_list_index(lst, idxs)
idxs
idxs <- which(vapply(lst, function(elem) identical(elem[[attr_name]], value), TRUE))
get_list_index(lst, idxs)
lst
lst[1]
unlist(lst[1], recursive=FALSE)
unlist(lst[1])
lst[[Â¦]]
lst[[1]]
runApp('tests/testthat/app')
data <- get_data_with_keys(datasets = datasets, dataname = dataname)
selected_data_extract_spec <- find_with_attribute_value(data_extract_spec, "dataname", dataname)
selected_data_extract_spec
runApp('tests/testthat/app')
data <- get_data_with_keys(datasets = datasets, dataname = dataname)
selected_data_extract_spec <- find_with_attribute_value(data_extract_spec, "dataname", dataname)
selected_data_extract_spec
filter_and_columns <- callModule(data_extract_single_module, dataname, data_extract_spec = selected_data_extract_spec)
filter_and_columns
filter_and_columns()
data <- get_data_with_keys(datasets = datasets, dataname = dataname)
selected_data_extract_spec <- find_with_attribute_value(data_extract_spec, "dataname", dataname)
filter_and_columns <- callModule(data_extract_single_module, dataname, data_extract_spec = selected_data_extract_spec)
filter_and_columns
runApp('tests/testthat/app')
data <- get_data_with_keys(datasets = datasets, dataname = dataname)
selected_data_extract_spec <- find_with_attribute_value(data_extract_spec, "dataname", dataname)
selected_data_extract_spec
filter_and_columns <- callModule(data_extract_single_module, dataname, data_extract_spec = selected_data_extract_spec)
filter_and_columns()
selected_data_extract_spec
runApp('tests/testthat/app')
data <- get_data_with_keys(datasets = datasets, dataname = dataname)
selected_data_extract_spec <- find_with_attribute_value(data_extract_spec, "dataname", dataname)
filter_and_columns <- callModule(data_extract_single_module, dataname, data_extract_spec = selected_data_extract_spec)
filter_and_columns
filter_and_columns()
runApp('tests/testthat/app')
input$filter
filters <- if (is.null(data_extract_spec$keys_filtering)) {
NULL
} else {
list(
columns=data_extract_spec$keys_filtering$vars,
selected=split_by_sep(input$filters, " - ")
)
}
runApp('tests/testthat/app')
filters <- if (is.null(data_extract_spec$keys_filtering)) {
NULL
} else {
list(
columns=data_extract_spec$keys_filtering$vars,
selected=split_by_sep(input$filters, " - ")
)
}
is.null(data_extract_spec$keys_filtering)
data_extract_spec$keys_filtering$vars
split_by_sep(input$filters, " - ")
is.null(data_extract_spec$keys_filtering)
runApp('tests/testthat/app')
data <- get_data_with_keys(datasets = datasets, dataname = dataname)
selected_data_extract_spec <- find_with_attribute_value(data_extract_spec, "dataname", dataname)
filter_and_columns <- callModule(data_extract_single_module, dataname, data_extract_spec = selected_data_extract_spec)
filter_and_columns()
is.null(data_extract_spec$keys_filtering)
names(input)
input$filters
data_extract_spec$keys_filtering
runApp('tests/testthat/app')
filters <- if (is.null(data_extract_spec$keys_filtering)) {
NULL
} else {
list(
columns=data_extract_spec$keys_filtering$vars,
selected=split_by_sep(input$filters, " - ")
)
}
l
is.null(data_extract_spec$keys_filtering)
runApp('tests/testthat/app')
data_extract_spec
data_extract_spec$keys_filtering
data_extract_spec$keys_filtering$vars
input
names(input)
runApp('tests/testthat/app')
input$dataset
input
input$filters
filters <- if (is.null(data_extract_spec$keys_filtering)) {
NULL
} else {
list(
columns=data_extract_spec$keys_filtering$vars,
selected=split_by_sep(input$filters, " - ")
)
}
runApp('tests/testthat/app')
data <- get_data_with_keys(datasets = datasets, dataname = dataname)
selected_data_extract_spec <- find_with_attribute_value(data_extract_spec, "dataname", dataname)
filter_and_columns <- callModule(data_extract_single_module, id=id_for_dataset(dataname), data_extract_spec = selected_data_extract_spec)
filter_and_columns()
runApp('tests/testthat/app')
data <- get_data_with_keys(datasets = datasets, dataname = dataname)
selected_data_extract_spec <- find_with_attribute_value(data_extract_spec, "dataname", dataname)
filter_and_columns <- callModule(data_extract_single_module, id=id_for_dataset(dataname), data_extract_spec = selected_data_extract_spec)
filter_and_columns()
devtools::load_all(".")
runApp('tests/testthat/app')
data
filters
columns
old_keys <- attr(data, "keys")
new_keys <- setdiff(old_keys, filters$variable_names)
if (!is.null(filters$selected)) {
# e.g. rlang::parse_expr("PARAMCD == 'CRP' & AVISIT == 'BASELINE'")
# parses the string into an expression for use with !!filter_str
filter_str <- rlang::parse_expr(get_keysfilter_str(filters))
data %<>%
filter(!!filter_str)
}
data %<>%
select(c(new_keys, columns))
attr(data, "keys") <- new_keys
attr(data, "dataname") <- dataname
data
filter_str
get_keysfilter_str(filters)
filters
devtools::load_all(".")
runApp('tests/testthat/app')
filters$variable_names
runApp('tests/testthat/app')
data
filters$columns
old_keys <- attr(data, "keys")
new_keys <- setdiff(old_keys, filters$columns)
get_keysfilter_str(filters)
if (!is.null(filters$selected)) {
# e.g. rlang::parse_expr("PARAMCD == 'CRP' & AVISIT == 'BASELINE'")
# parses the string into an expression for use with !!filter_str
filter_str <- rlang::parse_expr(get_keysfilter_str(filters))
data %<>%
filter(!!filter_str)
}
data %<>%
select(c(new_keys, columns))
attr(data, "keys") <- new_keys
attr(data, "dataname") <- dataname
data
names(data)
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
regressor_data()
merge_datasets(regressor_data(), response_data())
regressor_data()
names(regressor_data())
names(response_data())
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
dataset_selection <- helpText("Dataset:", tags$code(dataset_names[1]))
conditional_singledatasetview_chooser <- function(single_data_extract_spec) {
dataname <- single_data_extract_spec$dataname
conditionalPanel(
#todo: paste properly with quotes
condition = paste0("input['", ns("dataset"), "'] == '", dataname, "'"),
data_extract_input_single(ns(id_for_dataset(dataname)), single_data_extract_spec)
)
}
div(dataset_selection,
do.call(div, unname(lapply(data_extract_spec, conditional_singledatasetview_chooser)))
)
runApp('tests/testthat/app')
response_data()
regressor_data()
merge_datasets(regressor_data(), response_data())
get_dataset_prefixed_col_names(regressor_data())
get_dataset_prefixed_col_names(response_data())
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
div(dataset_selection,
do.call(div, unname(lapply(data_extract_spec, conditional_singledatasetview_chooser)))
)
devtools::load_all(".")
runApp('tests/testthat/app')
div(dataset_selection,
do.call(div, unname(lapply(data_extract_spec, conditional_singledatasetview_chooser)))
)
div(dataset_selection,
do.call(div, unname(lapply(data_extract_spec, conditional_singledatasetview_chooser)))
)
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
label
?callModule
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
label
label
dataset_selection
div(dataset_selection,
do.call(div, unname(lapply(data_extract_spec, conditional_singledatasetview_chooser)))
)
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
div(dataset_selection,
do.call(div, unname(lapply(data_extract_spec, conditional_singledatasetview_chooser)))
)
devtools::load_all(".")
runApp('tests/testthat/app')
single_data_extract_spec <- get_list_index(data_extract_spec, 1)
single_data_extract_spec
do.call(div,
helpText("Dataset:", tags$code(single_data_extract_spec$dataname)),
data_extract_input_single(id=ns(id_for_dataset(dataname)), single_data_extract_spec=single_data_extract_spec)
)
single_data_extract_spec$dataname
single_data_extract_spec <- get_list_index(data_extract_spec, 1)
dataname <- single_data_extract_spec$dataname
do.call(div,
helpText("Dataset:", tags$code(dataname)),
data_extract_input_single(id=ns(id_for_dataset(dataname)), single_data_extract_spec=single_data_extract_spec)
)
single_data_extract_spec
dataname
helpText("Dataset:", tags$code(dataname))
data_extract_input_single(id=ns(id_for_dataset(dataname)), single_data_extract_spec=single_data_extract_spec)
do.call(div,
helpText("Dataset:", tags$code(dataname)),
data_extract_input_single(id=ns(id_for_dataset(dataname)), single_data_extract_spec=single_data_extract_spec)
)
do.call(div,
helpText("Dataset:", tags$code(dataname)),
data_extract_input_single(id=ns(id_for_dataset(dataname)), single_data_extract_spec=single_data_extract_spec)
)
data_extract_input_single(id=ns(id_for_dataset(dataname)), single_data_extract_spec=single_data_extract_spec)
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
single_data_extract_spec <- get_list_index(data_extract_spec, 1)
dataname <- single_data_extract_spec$dataname
single_data_extract_spec
dataname
div(
helpText("Dataset:", tags$code(dataname)),
data_extract_input_single(id=ns(id_for_dataset(dataname)), single_data_extract_spec=single_data_extract_spec)
)
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
devtools::load_all(".")
runApp('tests/testthat/app')
filters <- if (is.null(single_data_extract_spec$keys_filtering)) {
NULL
} else {
list(
columns=single_data_extract_spec$keys_filtering$vars,
selected=split_by_sep(input$filters, " - ")
)
}
runApp('tests/testthat/app')
single_data_extract_spec$keys_filtering
single_data_extract_spec$keys_filtering$vars
split_by_sep(input$filters, " - ")
input$filters
input$columns
input$columns
list(filters = filters, columns = columns)
filters <- if (is.null(single_data_extract_spec$keys_filtering)) {
NULL
} else {
list(
columns=single_data_extract_spec$keys_filtering$vars,
selected=split_by_sep(input$filters, " - ")
)
}
columns <- if (is.null(input$columns)) {
single_data_extract_spec$columns$selected
} else {
input$columns
}
list(filters = filters, columns = columns)
filters <- if (is.null(single_data_extract_spec$keys_filtering)) {
NULL
} else {
list(
columns=single_data_extract_spec$keys_filtering$vars,
selected=split_by_sep(input$filters, " - ")
)
}
is.null(single_data_extract_spec$keys_filtering)
list(
columns=single_data_extract_spec$keys_filtering$vars,
selected=split_by_sep(input$filters, " - ")
)
filters <- list(
columns=single_data_extract_spec$keys_filtering$vars,
selected=split_by_sep(input$filters, " - ")
)
columns <- if (is.null(input$columns)) {
single_data_extract_spec$columns$selected
} else {
input$columns
}
columns <- if (is.null(input$columns)) {
single_data_extract_spec$columns$selected
} else {
input$columns
}
list(filters = filters, columns = columns)
list(filters = filters, columns = columns)
devtools::load_all(".")
runApp('tests/testthat/app')
merge_datasets(regressor_data(), response_data())
names(merge_datasets(regressor_data(), response_data()))
names(merge_datasets(regressor_data(), response_data()))
response_data()
names(response_data())
devtools::load_all(".")
runApp('tests/testthat/app')
filter_and_columns()
filter_and_columns()
filter_and_columns()
data
names(data)
devtools::load_all(".")
runApp('tests/testthat/app')
new_keys
old_keys
if (!is.null(filters$selected)) {
# e.g. rlang::parse_expr("PARAMCD == 'CRP' & AVISIT == 'BASELINE'")
# parses the string into an expression for use with !!filter_str
filter_str <- rlang::parse_expr(get_keysfilter_str(filters))
data %<>%
filter(!!filter_str)
}
