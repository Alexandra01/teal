strsplit(get_rcode_header(title = "My title"), "\n")[[1]],
"data.frame(x = y)",
"summary(td)"
)
expect_equal(
strsplit(get_rcode(title = "My title"), "\n")[[1]],
reference_string,
info = "Compare two expression with dataname replacement."
)
teal_data <- teal:::FilteredData$new(datanames = c("ASL"))
attr(test_data, "source") <- "data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(1, 1, 1, 1, 1, 1))"
teal_data$set_data("ASL", test_data)
#- third chunk including teal data
set_chunk("ASL_one", rlang::expr(summary(dataset)))
expect_error(
get_rcode(),
"title",
info = "No title check."
)
session$userData$chunks <- NULL
expect_error(
get_rcode(chunks = "NULL"),
"chunks",
info = "No Code chunks error expected upon empty code chunks."
)
})
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
library(teal.devel)
roxygen2::roxygenise()
getwd()
setwd("../../..")
getwd()
setwd("teal.devel/")
roxygen2::roxygenise()
library(teal.devel)
context("get_rcode")
session <- new.env()
session$userData <- new.env() # nolint
y <- c(1, 2)
td <- NULL
dataset <- NULL
use_chunks(session)
renew_chunk_environment(envir = environment(), session$userData$chunks)
session
devtools::load_all()
expect_silent(
set_chunk("tbl", rlang::expr(data.frame(x = y)))
)
set_chunk("tbl", rlang::expr(data.frame(x = y)),chunks = session)
set_chunk("tbl", rlang::expr(data.frame(x = y)), chunks = session$userData$chunks)
test_data <- data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(1, 1, 1, 1, 1, 1))
test_data <- data.frame(x = c(1, 2, 3, 4, 5, 6), y = c(1, 1, 1, 1, 1, 1))
reference_string <- c(
"",
strsplit(get_rcode_header(title = "My title"), "\n")[[1]],
"data.frame(x = y)"
)
expect_equal(
strsplit(get_rcode(title = "My title"), "\n")[[1]],
reference_string,
info = "Compare single expression chunk with get_rcode. no data."
)
get_rcode(title = "My title"), "\n")
get_rcode(title = "My title")
get_rcode(chunks = "NULL")
get_rcode_header(title = "My title")
get_rcode(title = "My title")
devtools::load_all()
get_rcode(title = "My title")
get_rcode(title = "My title")
get_rcode(title = "My title")
get_rcode(title = "My title")
get_rcode_header(title = "My title")
get_rcode(title = "My title")
get_rcode(title = "My title")
get_rcode(title = "My title")
get_rcode(title = "My title")
get_rcode(title = "My title")
get_rcode(title = "My title")
get_rcode(title = "My title")
get_rcode(title = "My title")
get_rcode_header(title = "Teal App")
get_rcode_header(title = "Teal App") %>% cat
paste0("# ", head, "\n")
getwd()
shiny::runApp('tests/testthat/app_get_code')
devtools::load_all()
runApp('tests/testthat/app_get_code')
head
paste0("# ", head, "\n")
paste0("# ", head)
Q
Q
get_rcode_header(title = "Teal App")
devtools::load_all()
session <- new.env()
session$userData <- new.env() # nolint
y <- c(1, 2)
td <- NULL
dataset <- NULL
use_chunks(session)
renew_chunk_environment(envir = environment(), session$userData$chunks)
expect_silent(
set_chunk("tbl", rlang::expr(data.frame(x = y)))
)
set_chunk("tbl", rlang::expr(data.frame(x = y)), chunks = session$userData$chunks)
expect_silent(
set_chunk("tbl", rlang::expr(data.frame(x = y)), chunks = session$userData$chunks)
)
session <- new.env()
session$userData <- new.env() # nolint
y <- c(1, 2)
td <- NULL
dataset <- NULL
use_chunks(session)
devtools::load_all()
use_chunks(session)
renew_chunk_environment(envir = environment(), session$userData$chunks)
set_chunk("tbl", rlang::expr(data.frame(x = y)))
get_rcode(title = "My title")
get_rcode(title = "My title",chunks = session$userData$chunks)
roxygen2::roxygenise()
lintr:::addin_lint()
lintr:::addin_lint()
roxygen2::roxygenise()
test.nest::test_lintr()
library(teal.devel)
roxygen2::roxygenise()
test.nest::test_lintr()
library(teal)
library(teal)
library(teal)
library(teal)
library(teal)
library(teal)
library(teal)
library(teal)
library(teal)
x <- 1
cdisc_data(X = x, code = NULL, check = FALSE)
cdisc_data(ASL = x, code = NULL, check = FALSE)
expect_error(
cdisc_data(ASL = x, code = NULL, check = FALSE),
"Data names should not be changed via argument\nASL != x"
)
library(testthat)
expect_error(
cdisc_data(ASL = x, code = NULL, check = FALSE),
"Data names should not be changed via argument\nASL != x"
)
expect_error(
cdisc_data(ASL = x, adte = y, code = NULL, check = FALSE),
"Data names should not be changed via argument\nASL != x"
)
y <- 1
expect_error(
cdisc_data(ASL = x, adte = y, code = NULL, check = FALSE),
"Data names should not be changed via argument\nASL != x"
)
expect_error(
cdisc_data(ASL = x, adte = y, code = NULL, check = FALSE),
"Data names should not be changed via argument\nASL != x\nADTE != y"
)
expect_error(
cdisc_data(ASL = x, ADTE = y, code = NULL, check = FALSE),
"Data names should not be changed via argument\nASL != x\nADTE != y"
)
library(teal)
library(testthat)
asl <- 1
adte <- 1
asl <- 1
adte <- 1
cdisc_data(ASL = asl, code = NULL, check = FALSE)
cdisc_data(asl = asl, code = NULL, check = FALSE)
source('~/nest/teal/tests/testthat/test_cdisc_data.R')
adte <- 1
cdisc_data(ASL = asl, adte = adte, code = NULL, check = FALSE)
ASL <- 1
adte <- 1
cdisc_data(ASL = ASL, adte = adte, code = NULL, check = FALSE)
ASL <- 1
ars <- 1
adte <- 1
ASL <- 1
ars <- 1
adte <- 1
expect_error(
cdisc_data(ASL = ASL, adte = adte, code = NULL, check = FALSE),
"Data arguments should be capitalized. Please change\adte to adte"
)
ASL <- 1
ars <- 1
adte <- 1
expect_error(
cdisc_data(ASL = ASL, adte = adte, code = NULL, check = FALSE),
"Data arguments should be capitalized. Please change\nadte to adte"
)
expect_error(
cdisc_data(ASL = ASL, adte = adte, code = NULL, check = FALSE),
"Data arguments should be capitalized. Please change\nadte to ADTE"
)
expect_error(
cdisc_data(ASL = ASL, adte = adte, ars = ars, code = NULL, check = FALSE),
"Data arguments should be capitalized. Please change\nadte to ADTE\nars to ARS"
)
library(teal)
library(testthat)
ASL <- 1
keys(ASL) <- "test"
expect_silent(cdisc_data(ASL, code = NULL, check = FALSE))
expect_silent(cdisc_data(ASL, ARG1 = ASL, ARG2 = ASL, code = NULL, check = FALSE))
ASL <- 1
ARG1 <- 1
ARG2 <- 1
expect_silent(cdisc_data(ASL, code = NULL, check = FALSE))
expect_silent(cdisc_data(ASL, ARG1 = ARG1, ARG2 = ARG2, code = NULL, check = FALSE))
ASL <- ARG1 <- ARG2 <- 1
keys(ASL) <- keys(ARG1) <- keys(ARG2) <- "test"
expect_silent(cdisc_data(ASL = ASL, code = "ASL <- 1; attr(ASL, 'keys') <- 'test'", check = TRUE))
expect_silent(cdisc_data(ASL = ASL, code = "ASL <- 1; keys(ASL) <- 'test'", check = TRUE))
expect_silent(cdisc_data(ASL = ASL, ARG1 = ARG1, ARG2 = ARG2,
code = "keys(ASL) <- keys(ARG1) <- keys(ARG2) <- 'test'",
check = TRUE))
expect_silent(cdisc_data(ASL = ASL, code = "ASL <- 1; keys(ASL) <- 'test'", check = TRUE))
expect_silent(cdisc_data(ASL = ASL, ARG1 = ARG1, ARG2 = ARG2,
code = "ASL <- ARG1 <- ARG2 <- 1; keys(ASL) <- keys(ARG1) <- keys(ARG2) <- 'test'",
check = TRUE))
ASL <- 1
keys(ASL) <- "test"
ASL <- 1
keys(ASL) <- "test"
expect_silent(cdisc_data(ASL = ASL, check = TRUE))
expect_silent(cdisc_data(ASL = ASL, code = NULL, check = TRUE))
expect_silent(cdisc_data(ASL = ASL, code = "", check = TRUE))
cdisc_data(ASL = ASL, check = TRUE)
cdisc_data(ASL = ASL, code = NULL, check = TRUE)
ASL <- ARG1 <- ARG2 <- 1
keys(ASL) <- keys(ARG1) <- keys(ARG2) <- "test"
expect_identical(names(cdisc_data(x)), "ASL")
expect_identical(names(cdisc_data(ASL)), "ASL")
expect_identical(names(cdisc_data(ASL = ASL, ARG1 = ARG1, ARG2 = ARG2)), c("ASL", "ARG1", "ARG2"))
ASL <- 1
keys(ASL) <- "test"
result <- cdisc_data(x)
result <- cdisc_data(ASL = ASL)
result <- cdisc_data(ASL)
expect_silent(cdisc_data(ASL, check = TRUE))
expect_silent(cdisc_data(ASL, code = NULL, check = TRUE))
expect_silent(cdisc_data(ASL, code = "", check = TRUE))
ASL <- 1
keys(ASL) <- "test"
result <- cdisc_data(ASL)
result_to_compare <- list(ASL = 1)
keys(result_to_compare[["ASL"]]) <- "test"
attr(result_to_compare[["ASL"]], "dataname") <- "ASL"
attr(result_to_compare, "code") <- "\n# code from cdisc_data argument(s)\n\nASL <- x"
expect_identical(result, result_to_compare)
result_to_compare
result
attr(result_to_compare, "code") <- "# !!! Preprocessing code is empty"
expect_identical(result, result_to_compare)
ASL <- 1
keys(ASL) <- "test"
result <- cdisc_data(ASL)
result_to_compare <- list(ASL = 1)
keys(result_to_compare[["ASL"]]) <- "test"
attr(result_to_compare[["ASL"]], "dataname") <- "ASL"
attr(result_to_compare, "code") <- "# !!! Preprocessing code is empty"
expect_identical(result, result_to_compare)
ASL <- ARG1 <- ARG2 <- 1
keys(ASL) <- keys(ARG1) <- keys(ARG2) <- "test"
result <- cdisc_data(ASL, ARG2 = ARG2, ARG3 = ARG3)
result <- cdisc_data(ASL, ARG1 = ARG1, ARG2 = ARG2)
ASL <- ARG1 <- ARG2 <- 1
keys(ASL) <- keys(ARG1) <- keys(ARG2) <- "test"
result <- cdisc_data(ASL, ARG1 = ARG1, ARG2 = ARG2)
ASL <- 1
ARG1 <- 2
ARG2 <- 3
keys(ASL) <- keys(ARG1) <- keys(ARG2) <- "test"
result <- cdisc_data(ASL, ARG1 = ARG1, ARG2 = ARG2)
result_to_compare <- list(ASL = 1, ARG1 = 2, ARG2 = 3)
result_to_compare
ASL <- 1
ARG1 <- 2
ARG2 <- 3
keys(ASL) <- keys(ARG1) <- keys(ARG2) <- "test"
result <- cdisc_data(ASL, ARG1 = ARG1, ARG2 = ARG2)
result_to_compare <- list(ASL = 1, ARG1 = 2, ARG2 = 3)
keys(result_to_compare[["ASL"]])  <- "test"
keys(result_to_compare[["ARG2"]]) <- "test"
keys(result_to_compare[["ARG3"]]) <- "test"
attr(result_to_compare[["ASL"]], "dataname")  <- "ASL"
attr(result_to_compare[["ARG2"]], "dataname") <- "ARG2"
attr(result_to_compare[["ARG3"]], "dataname") <- "ARG3"
attr(result_to_compare, "code") <- "# !!! Preprocessing code is empty"
ASL <- 1
ARG1 <- 2
ARG2 <- 3
keys(ASL) <- keys(ARG1) <- keys(ARG2) <- "test"
result <- cdisc_data(ASL, ARG1 = ARG1, ARG2 = ARG2)
result_to_compare <- list(ASL = 1, ARG1 = 2, ARG2 = 3)
keys(result_to_compare[["ASL"]])  <- "test"
keys(result_to_compare[["ARG1"]]) <- "test"
keys(result_to_compare[["ARG@"]]) <- "test"
attr(result_to_compare[["ASL"]], "dataname")  <- "ASL"
attr(result_to_compare[["ARG1"]], "dataname") <- "ARG2"
attr(result_to_compare[["ARG2"]], "dataname") <- "ARG3"
attr(result_to_compare, "code") <- "# !!! Preprocessing code is empty"
ASL <- 1
ARG1 <- 2
ARG2 <- 3
keys(ASL) <- keys(ARG1) <- keys(ARG2) <- "test"
result <- cdisc_data(ASL, ARG1 = ARG1, ARG2 = ARG2)
result_to_compare <- list(ASL = 1, ARG1 = 2, ARG2 = 3)
keys(result_to_compare[["ASL"]])  <- "test"
keys(result_to_compare[["ARG1"]]) <- "test"
keys(result_to_compare[["ARG@"]]) <- "test"
attr(result_to_compare[["ASL"]], "dataname")  <- "ASL"
attr(result_to_compare[["ARG1"]], "dataname") <- "ARG2"
attr(result_to_compare[["ARG2"]], "dataname") <- "ARG3"
attr(result_to_compare, "code") <- "# !!! Preprocessing code is empty"
result_to_compare <- list(ASL = 1, ARG1 = 2, ARG2 = 3)
keys(result_to_compare[["ASL"]])  <- "test"
keys(result_to_compare[["ARG1"]]) <- "test"
keys(result_to_compare[["ARG2"]]) <- "test"
attr(result_to_compare[["ASL"]], "dataname")  <- "ASL"
attr(result_to_compare[["ARG1"]], "dataname") <- "ARG2"
attr(result_to_compare[["ARG2"]], "dataname") <- "ARG3"
attr(result_to_compare, "code") <- "# !!! Preprocessing code is empty"
expect_identical(result, result_to_compare)
ASL <- 1
ARG1 <- 2
ARG2 <- 3
keys(ASL) <- keys(ARG1) <- keys(ARG2) <- "test"
result <- cdisc_data(ASL, ARG1 = ARG1, ARG2 = ARG2)
result_to_compare <- list(ASL = 1, ARG1 = 2, ARG2 = 3)
keys(result_to_compare[["ASL"]])  <- "test"
keys(result_to_compare[["ARG1"]]) <- "test"
keys(result_to_compare[["ARG2"]]) <- "test"
attr(result_to_compare[["ASL"]], "dataname")  <- "ASL"
attr(result_to_compare[["ARG1"]], "dataname") <- "ARG2"
attr(result_to_compare[["ARG2"]], "dataname") <- "ARG3"
attr(result_to_compare, "code") <- "# !!! Preprocessing code is empty"
result_to_compare
result
expect_identical(result, result_to_compare)
ASL <- 1
ARG1 <- 2
ARG2 <- 3
keys(ASL) <- keys(ARG1) <- keys(ARG2) <- "test"
result <- cdisc_data(ASL, ARG1 = ARG1, ARG2 = ARG2)
result_to_compare <- list(ASL = 1, ARG1 = 2, ARG2 = 3)
keys(result_to_compare[["ASL"]])  <- "test"
keys(result_to_compare[["ARG1"]]) <- "test"
keys(result_to_compare[["ARG2"]]) <- "test"
attr(result_to_compare[["ASL"]], "dataname")  <- "ASL"
attr(result_to_compare[["ARG1"]], "dataname") <- "ARG2"
attr(result_to_compare[["ARG2"]], "dataname") <- "ARG3"
attr(result_to_compare, "code") <- "# !!! Preprocessing code is empty"
expect_identical(result, result_to_compare)
ASL <- 1
keys(ASL) <- "test"
result <- cdisc_data(ASL)
result_to_compare <- list(ASL = 1)
keys(result_to_compare[["ASL"]]) <- "test"
attr(result_to_compare[["ASL"]], "dataname") <- "ASL"
attr(result_to_compare, "code") <- "# !!! Preprocessing code is empty"
expect_identical(result, result_to_compare)
ASL <- 1
ARG1 <- 2
ARG2 <- 3
keys(ASL) <- keys(ARG1) <- keys(ARG2) <- "test"
result <- cdisc_data(ASL, ARG1 = ARG1, ARG2 = ARG2)
result_to_compare <- list(ASL = 1, ARG1 = 2, ARG2 = 3)
keys(result_to_compare[["ASL"]])  <- "test"
keys(result_to_compare[["ARG1"]]) <- "test"
keys(result_to_compare[["ARG2"]]) <- "test"
attr(result_to_compare[["ASL"]], "dataname")  <- "ASL"
attr(result_to_compare[["ARG1"]], "dataname") <- "ARG1"
attr(result_to_compare[["ARG2"]], "dataname") <- "ARG2"
attr(result_to_compare, "code") <- "# !!! Preprocessing code is empty"
expect_identical(result, result_to_compare)
ASL <- 1 #nolint
keys(ASL) <- "test"
result <- cdisc_data(ASL, check = FALSE)
expect_identical(attr(result, "code"), "# !!! Preprocessing code is empty")
result <- cdisc_data(ASL, code = NULL, check = FALSE)
expect_identical(attr(result, "code"), "# !!! Preprocessing code is empty")
result <- cdisc_data(ASL, code = "", check = FALSE)
expect_identical(attr(result, "code"), "# !!! Preprocessing code is empty")
ASL <- 1
keys(ASL) <- "test"
result <- cdisc_data(ASL, code = "ASL <- 1; keys(ASL) <- 'test'", check = FALSE)
expect_silent(result)
ASL <- 1
keys(ASL) <- "test"
result <- cdisc_data(ASL, code = "ASL <- 1; keys(ASL) <- 'test'", check = FALSE)
result
expect_silent(result)
result_to_compare <- list(ASL = 1)
keys(result_to_compare[["ASL"]]) <- "test"
attr(result_to_compare[["ASL"]], "dataname") <- "ASL"
attr(result_to_compare, "code") <- "ASL <- 1; keys(ASL) <- 'test'"
expect_identical(result, result_to_compare)
ASL <- 1
expect_error(
cdisc_data(ASL, code = "ASL <- 2", check = TRUE),
"Cannot reproduce object"
)
keys(x) <- "test"
expect_error(
cdisc_data(ASL, code = "ASL <- 1; keys(ASL) <- ''", check = TRUE),
"Cannot reproduce object"
)
expect_error(cdisc_data(ARG1 = 1, code = NULL, check = FALSE), "ASL and code arguments are missing")
expect_error(cdisc_data(code = "x <- 2", check = FALSE), "ASL is missing and cannot be generated by code")
cdisc_data(code = "x <- 2", check = FALSE)
cdisc_data(ARG1 = 1, code = NULL, check = FALSE)
cdisc_data(1 + 2, code = "test code", check = TRUE)
ASL <- 1
keys(ASL) <- "test"
expect_error(
cdisc_data(1 + 2, code = "test code", check = TRUE),
"Automatic checking is not supported if arguments provided as calls"
)
cdisc_data(1 + 2, code = "test code", check = TRUE)
expect_error(
cdisc_data(foo(1), code = "test code", check = TRUE),
"Automatic checking is not supported if arguments provided as calls"
)
expect_error(
cdisc_data(ASL, ASL, code = NULL, check = FALSE),
"All arguments passed to '...' should be named"
)
expect_error(
cdisc_data(ASL, ASL, code = "ASL <- 1", check = FALSE),
"All arguments passed to '...' should be named"
)
ASL <- 1
ADTE <- 2
asl <- 1
adte <- 2
expect_error(
cdisc_data(ASL = asl, code = NULL, check = FALSE),
"Data names should not be changed via argument\nASL != x"
)
expect_error(
cdisc_data(ASL = asl, ADTE = ade, code = NULL, check = FALSE),
"Data names should not be changed via argument\nASL != asl\nADTE != adte"
)
asl <- 1
adte <- 2
expect_error(
cdisc_data(ASL = asl, code = NULL, check = FALSE),
"Data names should not be changed via argument\nASL != x"
)
expect_error(
cdisc_data(ASL = asl, code = NULL, check = FALSE),
"Data names should not be changed via argument\nASL != asl"
)
expect_error(
cdisc_data(ASL = asl, ADTE = ade, code = NULL, check = FALSE),
"Data names should not be changed via argument\nASL != asl\nADTE != adte"
)
expect_error(
cdisc_data(ASL = asl, ADTE = adte, code = NULL, check = FALSE),
"Data names should not be changed via argument\nASL != asl\nADTE != adte"
)
expect_error(
cdisc_data(ASL = asl, ADTE = adte, code = NULL, check = FALSE),
"Data names should not be changed via argument\nASL != asl\nADTE != adte"
)
ASL <- 1
ars <- 1
adte <- 1
expect_error(
cdisc_data(ASL = ASL, adte = adte, code = NULL, check = FALSE),
"Data arguments should be capitalized. Please change\nadte to ADTE"
)
expect_error(
cdisc_data(ASL = ASL, adte = adte, ars = ars, code = NULL, check = FALSE),
"Data arguments should be capitalized. Please change\nadte to ADTE\nars to ARS"
)
test_that("Error - objects differs", {
ASL <- 1
expect_error(
cdisc_data(ASL, code = "ASL <- 2", check = TRUE),
"Cannot reproduce object"
)
keys(x) <- "test"
expect_error(
cdisc_data(ASL, code = "ASL <- 1; keys(ASL) <- ''", check = TRUE),
"Cannot reproduce object"
)
})
library(teal)
library(testthat)
asl <- 1
ars <- 1
adte <- 1
cdisc_data(asl, code = NULL, check = FALSE)
library(teal)
devtools::test()
roxygen2::roxygenise()
library(teal)
library(teal)
