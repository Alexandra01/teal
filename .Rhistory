expect_error(select_spec(choices = choices, selected = list(list(selected))))
expect_error(select_spec(choices = choices, selected = selected, multiple = 1), "is.logical.single")
test_that("Proper argument types", {
choices <- c("c1", "c2", "c3")
selected <- c("c1", "c2")
expect_silent(select_spec(choices = choices, selected = selected))
expect_error(select_spec(choices = list(list(choices)), selected = selected))
expect_error(select_spec(choices = choices, selected = list(list(selected))))
expect_error(select_spec(choices = choices, selected = selected, multiple = 1), "is.logical.single")
expect_error(select_spec(choices = choices, selected = selected, multiple = c(TRUE, TRUE)), "is.logical.single")
expect_error(select_spec(choices = choices, selected = selected, fixed = 1), "is.logical.single")
expect_error(select_spec(choices = choices, selected = selected, label = factor("Hello")), "is.character.single")
#
choices <- list(c("a", "b"), c("c", "d"))
expect_error(select_spec(choices = choices, selected = c("a", "b")), "selected %is_in%")
expect_error(select_spec(choices = choices, selected = list(c("a", "c"))), "selected %is_in%")
expect_silent(select_spec(choices = choices, selected = list(c("a", "b"))))
expect_silent(select_spec(choices = c("a", "b", "c"), selected = c("a", "b")))
})
select_spec(choices = choices, selected = selected, multiple = 1)
expect_error(select_spec(choices = choices, selected = selected, multiple = 1), "is.logical.single")
expect_error(select_spec(choices = choices, selected = selected, multiple = 1), "is.logical.single")
select_spec(choices = choices, selected = selected, multiple = 1)
?select_spec
choices <- c("c1", "c2", "c3")
selected <- c("c1", "c2")
expect_silent(select_spec(choices = choices, selected = selected))
expect_error(select_spec(choices = list(list(choices)), selected = selected))
expect_error(select_spec(choices = choices, selected = list(list(selected))))
expect_error(select_spec(choices = choices, selected = selected, multiple = 1), "is.logical.single")
expect_message(
expect_error(select_spec(choices = choices, selected = selected, multiple = 1), "is.logical.single"),
"x = '1' (numeric)"
)
?expect_message
expect_message(
expect_error(select_spec(choices = choices, selected = selected, multiple = 1), "is.logical.single"),
"x = '1' (numeric)", fixed = TRUE
)
expect_error(select_spec(choices = choices, selected = selected, multiple = c(TRUE, TRUE)), "is.logical.single")
expect_error(select_spec(choices = choices, selected = selected, fixed = 1), "is.logical.single")
expect_error(select_spec(choices = choices, selected = selected, label = factor("Hello")), "is.character.single")
expect_message(
expect_error(select_spec(choices = choices, selected = selected, multiple = c(TRUE, TRUE)), "is.logical.single"),
"'TRUE TRUE' (logical)", fixed = TRUE
)
expect_message(
expect_error(select_spec(choices = choices, selected = selected, fixed = 1), "is.logical.single"),
"'1' (numeric)", fixed = TRUE
)
expect_message(
expect_error(select_spec(choices = choices, selected = selected, label = factor("Hello")), "is.character.single"),
"'Hello'", fixed = TRUE
)
expect_message(
expect_error(select_spec(choices = choices, selected = selected, label = factor("Hello")), "is.character.single"),
"'Hello", fixed = TRUE
)
# select among choices
choices <- list(c("a", "b"), c("c", "d"))
expect_error(select_spec(choices = choices, selected = c("a", "b")), "selected %is_in%")
expect_error(select_spec(choices = choices, selected = list(c("a", "c"))), "selected %is_in%")
expect_silent(select_spec(choices = choices, selected = list(c("a", "b"))))
expect_silent(select_spec(choices = c("a", "b", "c"), selected = c("a", "b")))
expect_silent(
c1 <- select_spec(
choices = c("AVAL", "BMRKR1", "AGE"),
selected = c("AVAL"),
fixed = FALSE,
label = "Column"
)
)
expect_silent(
c2 <- select_spec(
choices = c("AVAL", "BMRKR1", "AGE"),
fixed = FALSE,
label = "Column"
)
)
expect_identical(c1, c2)
expect_identical(class(c1), "select_spec")
expect_identical(c1$choices,  as.list(setNames(c("AVAL", "BMRKR1", "AGE"), c("AVAL", "BMRKR1", "AGE"))))
expect_identical(c2$selected,  as.list(setNames("AVAL", "AVAL")))
expect_false(c1$multiple)
expect_false(c2$multiple)
expect_false(c1$fixed)
expect_false(c2$fixed)
# minimal example
expect_silent(c3 <- select_spec(choices = c("AVAL", "BMRKR1", "AGE")))
expect_identical(class(c3), "select_spec")
expect_identical(c3$choices,  as.list(setNames(c("AVAL", "BMRKR1", "AGE"), c("AVAL", "BMRKR1", "AGE"))))
expect_identical(c3$selected,  as.list(setNames("AVAL", "AVAL")))
expect_false(c3$multiple)
expect_false(c3$fixed)
expect_identical(c3$label, "Column(s)")
test_that("Single choice", {
expect_silent(
c1 <- select_spec(
choices = c("AVAL", "BMRKR1", "AGE"),
selected = c("AVAL"),
fixed = FALSE,
label = "Column"
)
)
expect_silent(
c2 <- select_spec(
choices = c("AVAL", "BMRKR1", "AGE"),
fixed = FALSE,
label = "Column"
)
)
expect_identical(c1, c2)
expect_identical(class(c1), "select_spec")
expect_identical(c1$choices,  as.list(setNames(c("AVAL", "BMRKR1", "AGE"), c("AVAL", "BMRKR1", "AGE"))))
expect_identical(c2$selected,  as.list(setNames("AVAL", "AVAL")))
expect_false(c1$multiple)
expect_false(c2$multiple)
expect_false(c1$fixed)
expect_false(c2$fixed)
# minimal example
expect_silent(c3 <- select_spec(choices = c("AVAL", "BMRKR1", "AGE")))
expect_identical(class(c3), "select_spec")
expect_identical(c3$choices,  as.list(setNames(c("AVAL", "BMRKR1", "AGE"), c("AVAL", "BMRKR1", "AGE"))))
expect_identical(c3$selected,  as.list(setNames("AVAL", "AVAL")))
expect_false(c3$multiple)
expect_false(c3$fixed)
expect_identical(c3$label, "Column(s)")
})
test_that("Multiple choices", {
choices <- c("c1", "c2", "c3")
selected <- c("c1", "c2")
expect_error(select_spec(choices = choices, selected = selected, multiple = FALSE), "multiple \\|\\| length")
expect_silent(c1 <- select_spec(choices = choices, selected = selected, multiple = TRUE))
expect_silent(c2 <- select_spec(choices = choices, selected = selected))
expect_identical(c1, c2)
expect_identical(names(c1), c("choices", "selected", "multiple", "fixed", "label"))
expect_identical(c1$choices, as.list(setNames(choices, choices)))
expect_identical(c1$selected, as.list(setNames(selected, selected)))
expect_true(c1$multiple)
expect_false(c1$fixed)
expect_identical(c1$label, "Column(s)")
# choices nested in list
choices <- list(c("a", "b"), c("c", "d"), c("e", "f"))
selected <- list(c("a", "b"))
expect_silent(c3 <- select_spec(choices = choices, selected = selected))
expect_identical(c3$choices, setNames(choices, vapply(choices, paste, collapse = " - ", character(1))))
expect_identical(c3$selected, setNames(selected, vapply(selected, paste, collapse = " - ", character(1))))
})
choices <- c("val1", "val2", "val3")
choices_d <- c("val1", "val1", "val2", "val3")
choices_f <- as.factor(choices)
choices_l <- as.list(choices)
test_that("Proper argument types", {
expect_error(filter_spec(vars = list("var"), choices = choices), "is.atomic")
expect_error(filter_spec(vars = "var", choices = choices_l), "is.atomic")
expect_error(filter_spec(vars = "var", choices = choices, selected = list("val2")), "is.atomic")
expect_error(filter_spec(vars = 1, choices = choices, selected = choices[1]), "is.character")
expect_error(filter_spec(vars = "var", choices = 1:3, selected = 1), "is.character")
expect_error(filter_spec(vars = factor("var"), choices = choices, selected = choices[1]), "is.character")
expect_error(filter_spec(vars = "var", choices = choices_f, selected = choices_f[1]), "is.character")
expect_error(filter_spec(vars = "var", choices = choices, multiple = 1), "is.logical")
expect_error(filter_spec(vars = "var", choices = choices, label = factor("test")), "is.character")
expect_error(filter_spec(vars = "var", choices = choices_d), "duplicated")
expect_error(filter_spec(vars = "var", choices = choices, selected = c("val1", "val1")), "duplicated")
expect_error(filter_spec(vars = "var", choices = choices, label = c("test", "test2")), "is.character.single")
expect_error(filter_spec(vars = "var", choices = choices, sep = c("-", ",")), "is.character.single")
})
test_that("Single choice", {
expect_silent(f1 <- filter_spec(vars = "var1",
choices = choices,
selected = choices[1],
multiple = FALSE,
label = "test"))
expect_identical(names(f1), c("vars", "choices", "selected", "multiple", "fixed", "label"))
expect_identical(f1$choices, as.list(setNames(choices, choices)))
expect_identical(f1$selected, as.list(setNames(choices[1], choices[1])))
expect_false(f1$multiple)
expect_false(f1$fixed)
expect_identical(f1$label, "test")
})
expect_error(filter_spec(vars = list("var"), choices = choices), "is.atomic")
expect_error(filter_spec(vars = "var", choices = choices_l), "is.atomic")
expect_error(filter_spec(vars = "var", choices = choices, selected = list("val2")), "is.atomic")
expect_error(filter_spec(vars = 1, choices = choices, selected = choices[1]), "is.character")
expect_error(filter_spec(vars = "var", choices = 1:3, selected = 1), "is.character")
expect_error(filter_spec(vars = factor("var"), choices = choices, selected = choices[1]), "is.character")
expect_error(filter_spec(vars = "var", choices = choices_f, selected = choices_f[1]), "is.character")
expect_error(filter_spec(vars = "var", choices = choices, multiple = 1), "is.logical")
expect_error(filter_spec(vars = "var", choices = choices, label = factor("test")), "is.character")
expect_error(filter_spec(vars = "var", choices = choices_d), "duplicated")
expect_error(filter_spec(vars = "var", choices = choices, selected = c("val1", "val1")), "duplicated")
expect_error(filter_spec(vars = "var", choices = choices, label = c("test", "test2")), "is.character.single")
test_that("Proper argument types", {
expect_error(filter_spec(vars = list("var"), choices = choices), "is.atomic")
expect_error(filter_spec(vars = "var", choices = choices_l), "is.atomic")
expect_error(filter_spec(vars = "var", choices = choices, selected = list("val2")), "is.atomic")
expect_error(filter_spec(vars = 1, choices = choices, selected = choices[1]), "is.character")
expect_error(filter_spec(vars = "var", choices = 1:3, selected = 1), "is.character")
expect_error(filter_spec(vars = factor("var"), choices = choices, selected = choices[1]), "is.character")
expect_error(filter_spec(vars = "var", choices = choices_f, selected = choices_f[1]), "is.character")
expect_error(filter_spec(vars = "var", choices = choices, multiple = 1), "is.logical")
expect_error(filter_spec(vars = "var", choices = choices, label = factor("test")), "is.character")
expect_error(filter_spec(vars = "var", choices = choices_d), "duplicated")
expect_error(filter_spec(vars = "var", choices = choices, selected = c("val1", "val1")), "duplicated")
expect_error(filter_spec(vars = "var", choices = choices, label = c("test", "test2")), "is.character.single")
expect_error(filter_spec(vars = "var", choices = choices, sep = c("-", ",")), "is.character.single")
})
usethis::use_test("data_extract_spec")
?data_extract_spec
data_extract_spec(
"toyDataset",
select = NULL
)
expect_error(
data_extract_spec(
"toyDataset",
select = NULL
),
"select, \"select_spec\"", fixed = TRUE
)
data_extract_spec(
"toyDataset", select = c("A", "B")
)
data_extract_spec(
"toyDataset",
select = select_spec(
label = "Select variable:",
choices = c("SEX", "RACE"),
selected = "SEX",
multiple = FALSE,
fixed = FALSE
)
)
res <- data_extract_spec(
"toyDataset",
select = select_spec(
label = "Select variable:",
choices = c("SEX", "RACE"),
selected = "SEX",
multiple = FALSE,
fixed = FALSE
)
)
View(res)
select_spec <- select_spec(
label = "Select variable:",
choices = c("SEX", "RACE"),
selected = "SEX",
multiple = FALSE,
fixed = FALSE
)
res <- data_extract_spec(
"toyDataset",
select = select_spec
)
extract_spec <- data_extract_spec(
"toyDataset",
select = select_spec
)
extract_spec$select_spec
extract_spec
extract_spec$select
expect_identical(extract_spec$select, select_spec)
expect_identical(extract_spec$label, "Select variable:")
extract_spec$label
data_extract_spec(
dataname = "ADTTE",
select = select_spec(
label = "Select variable:",
choices = c("AVAL", "CNSR"),
selected = "AVAL",
multiple = FALSE,
fixed = FALSE
),
filter = filter_spec(
label = "Select parameter:",
vars = "PARAMCD",
choices = levels(ADTTE$PARAMCD),
selected = "PFS",
multiple = FALSE
)
)
data_extract_spec(
dataname = "ADTTE",
select = select_spec(
label = "Select variable:",
choices = c("AVAL", "CNSR"),
selected = "AVAL",
multiple = FALSE,
fixed = FALSE
),
filter = filter_spec(
label = "Select parameter:",
vars = "PARAMCD",
choices = c("OS", "PFS"),
selected = "PFS",
multiple = FALSE
)
)
select_spec1 <- select_spec(
label = "Select variable:",
choices = c("AVAL", "CNSR"),
selected = "AVAL",
multiple = FALSE,
fixed = FALSE
)
filter_spec1 <- filter_spec(
label = "Select parameter:",
vars = "PARAMCD",
choices = c("OS", "PFS"),
selected = "PFS",
multiple = FALSE
)
data_extract_spec(
dataname = "ADTTE",
select = select_spec1,
filter = filter_spec1
)
select_spec1 <- select_spec(
label = "Select variable:",
choices = c("AVAL", "CNSR"),
selected = "AVAL",
multiple = FALSE,
fixed = FALSE
)
filter_spec1 <- filter_spec(
label = "Select parameter:",
vars = "PARAMCD",
choices = c("OS", "PFS"),
selected = "PFS",
multiple = FALSE
)
data_extract_spec1 <- data_extract_spec(
dataname = "ADTTE",
select = select_spec1,
filter = filter_spec1
)
expect_identical(data_extract_spec1$select, select_spec1)
expect_identical(data_extract_spec1$filter, filter_spec1)
# with reshape (only makes sense when filter is there)
filter_spec1 <- filter_spec(
label = "Select parameter:",
vars = "PARAMCD",
choices = c("OS", "PFS", "OS2"),
selected = c("OS", "PFS"),
multiple = TRUE
)
data_extract_spec1 <- data_extract_spec(
dataname = "ADTTE",
select = select_spec1,
filter = filter_spec1,
reshape = TRUE
)
?teal::init
data_extract_spec1 <- data_extract_spec(
dataname = "ADTTE",
select = select_spec1,
filter = filter_spec1,
reshape = TRUE
)
expect_identical(data_extract_spec1$select, select_spec1)
expect_identical(data_extract_spec1$filter, filter_spec1)
expect_identical(data_extract_spec1$reshape, TRUE)
test_that("data_extract_spec works with valid input", {
# the dataset does not exist, so we just check if the combinations are accepted
# UI testing is done elsewhere #todo: where?
# we add 1 to the var names to avoid confusion with their respective functions
select_spec1 <- select_spec(
label = "Select variable:",
choices = c("SEX", "RACE"),
selected = "SEX",
multiple = FALSE,
fixed = FALSE
)
data_extract_spec1 <- data_extract_spec(
"toyDataset",
select = select_spec1
)
expect_identical(data_extract_spec1$select, select_spec1)
# with filter
select_spec1 <- select_spec(
label = "Select variable:",
choices = c("AVAL", "CNSR"),
selected = "AVAL",
multiple = FALSE,
fixed = FALSE
)
filter_spec1 <- filter_spec(
label = "Select parameter:",
vars = "PARAMCD",
choices = c("OS", "PFS"),
selected = "PFS",
multiple = FALSE
)
data_extract_spec1 <- data_extract_spec(
dataname = "ADTTE",
select = select_spec1,
filter = filter_spec1
)
expect_identical(data_extract_spec1$select, select_spec1)
expect_identical(data_extract_spec1$filter, filter_spec1)
# with reshape (only makes sense when filter is there)
filter_spec1 <- filter_spec(
label = "Select parameter:",
vars = "PARAMCD",
choices = c("OS", "PFS", "OS2"),
selected = c("OS", "PFS"),
multiple = TRUE
)
data_extract_spec1 <- data_extract_spec(
dataname = "ADTTE",
select = select_spec1,
filter = filter_spec1,
reshape = TRUE
)
expect_identical(data_extract_spec1$select, select_spec1)
expect_identical(data_extract_spec1$filter, filter_spec1)
expect_identical(data_extract_spec1$reshape, TRUE)
})
test_that("data_extract_spec argument checking", {
expect_error(
data_extract_spec("toyDataset", select = NULL),
"select, \"select_spec\"", fixed = TRUE
)
expect_error(
data_extract_spec("toyDataset", select = c("A", "B")),
"select, \"select_spec\"", fixed = TRUE
)
})
test_that("data_extract_spec works with valid input", {
# the dataset does not exist, so we just check if the combinations are accepted
# UI testing is done elsewhere #todo: where?
# we add 1 to the var names to avoid confusion with their respective functions
select_spec1 <- select_spec(
label = "Select variable:",
choices = c("SEX", "RACE"),
selected = "SEX",
multiple = FALSE,
fixed = FALSE
)
data_extract_spec1 <- data_extract_spec(
"toyDataset",
select = select_spec1
)
expect_identical(data_extract_spec1$select, select_spec1)
# with filter
select_spec1 <- select_spec(
label = "Select variable:",
choices = c("AVAL", "CNSR"),
selected = "AVAL",
multiple = FALSE,
fixed = FALSE
)
filter_spec1 <- filter_spec(
label = "Select parameter:",
vars = "PARAMCD",
choices = c("OS", "PFS"),
selected = "PFS",
multiple = FALSE
)
data_extract_spec1 <- data_extract_spec(
dataname = "ADTTE",
select = select_spec1,
filter = filter_spec1
)
expect_identical(data_extract_spec1$select, select_spec1)
expect_identical(data_extract_spec1$filter, filter_spec1)
# with reshape (only makes sense when filter is there)
filter_spec1 <- filter_spec(
label = "Select parameter:",
vars = "PARAMCD",
choices = c("OS", "PFS", "OS2"),
selected = c("OS", "PFS"),
multiple = TRUE
)
data_extract_spec1 <- data_extract_spec(
dataname = "ADTTE",
select = select_spec1,
filter = filter_spec1,
reshape = TRUE
)
expect_identical(data_extract_spec1$select, select_spec1)
expect_identical(data_extract_spec1$filter, filter_spec1)
expect_identical(data_extract_spec1$reshape, TRUE)
})
library(lintr)
lintr:::addin_lint()
teal::init
library(styler)
styler:::style_active_file()
lintr:::addin_lint()
styler:::style_active_file()
lintr:::addin_lint()
styler:::style_active_file()
lintr:::addin_lint()
devtools::check()
??standard_layout
tm_regression
teal.modules.general::tm_regression
teal.modules.general::tm_cross_table
module
?module
?datanames_input
context("cdisc_data")
filename <- system.file("teal", "preprocessing_empty_string.txt")
filename
?system.file
filename <- system.file("preprocessing_empty_string.txt", package = "teal")
source('~/teal/tests/testthat/test_cdisc_data.R', echo=TRUE)
filename
devtools::check()
devtools::check()
