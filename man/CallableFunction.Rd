% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CallableFunction.R
\name{CallableFunction}
\alias{CallableFunction}
\title{A \code{CallableFunction} class of objects}
\description{
A \code{CallableFunction} class of objects

A \code{CallableFunction} class of objects
}
\details{
Object that stores function name with it's arguments. Methods to get call and run it.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{CallableFunction$new()}}
\item \href{#method-assign_to_env}{\code{CallableFunction$assign_to_env()}}
\item \href{#method-is_failed}{\code{CallableFunction$is_failed()}}
\item \href{#method-get_args}{\code{CallableFunction$get_args()}}
\item \href{#method-get_call}{\code{CallableFunction$get_call()}}
\item \href{#method-get_error_message}{\code{CallableFunction$get_error_message()}}
\item \href{#method-run}{\code{CallableFunction$run()}}
\item \href{#method-set_args}{\code{CallableFunction$set_args()}}
\item \href{#method-set_arg_value}{\code{CallableFunction$set_arg_value()}}
\item \href{#method-clone}{\code{CallableFunction$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
Create a new \code{CallableFunction} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallableFunction$new(fun, env = new.env(parent = parent.env(globalenv())))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fun}}{(\code{function})\cr
function to be evaluated in class. Function should be named}

\item{\code{env}}{(\code{environment})\cr
environment where function will be evaluated}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
new \code{CallableFunction} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-assign_to_env"></a>}}
\subsection{Method \code{assign_to_env()}}{
Assigns \code{x <- value} object to \code{env}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallableFunction$assign_to_env(x, value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{(\code{character} value)\cr
name of the variable in class environment}

\item{\code{value}}{(\code{data.frame})\cr
object to be assigned to \code{x}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
arguments the function gets called with
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-is_failed"></a>}}
\subsection{Method \code{is_failed()}}{
Check if evaluation of the function has not failed.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallableFunction$is_failed()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{TRUE} if evaluation of the function failed or \code{FALSE}
 if evaluation failed or function hasn't yet been called.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_args"></a>}}
\subsection{Method \code{get_args()}}{
get the arguments a function gets called with
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallableFunction$get_args()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
arguments the function gets called with
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_call"></a>}}
\subsection{Method \code{get_call()}}{
Get function call with substituted arguments in \code{args}.
These arguments will not be stored in the object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallableFunction$get_call(deparse = TRUE, args = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deparse}}{(\code{logical} value)\cr
whether to return a deparsed version of call}

\item{\code{args}}{(\code{NULL} or named \code{list})\cr
dynamic arguments to function}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{call} or \code{character} depending on \code{deparse} argument
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_error_message"></a>}}
\subsection{Method \code{get_error_message()}}{
Get error message from last function execution
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallableFunction$get_error_message()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{try-error} object with error message or \code{character(0)} if last
 function evaluation was successful.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-run"></a>}}
\subsection{Method \code{run()}}{
Run function
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallableFunction$run(return = TRUE, args = NULL, try = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{return}}{(\code{logical} value)\cr
whether to return an object}

\item{\code{args}}{(\code{NULL} or named \code{list})\cr
dynamic arguments passed to function. Dynamic arguments are executed in this call and are not
saved which means that \code{self$get_call()} won't include them later.}

\item{\code{try}}{(\code{logical} value)\cr
whether perform function evaluation inside \code{try} clause}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
nothing or output from function depending on \code{return} argument
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_args"></a>}}
\subsection{Method \code{set_args()}}{
Set up function arguments
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallableFunction$set_args(args)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{args}}{(\code{NULL} or named \code{list})\cr
function arguments to be stored persistently in the object. Setting \code{args} doesn't
remove other \code{args}, only create new of modify previous of the same name.
To clean arguments specify \code{args = NULL}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
self
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_arg_value"></a>}}
\subsection{Method \code{set_arg_value()}}{
Set up single function argument with value
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallableFunction$set_arg_value(name, value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{(\code{character}) argument name}

\item{\code{value}}{argument value}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
self
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallableFunction$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
