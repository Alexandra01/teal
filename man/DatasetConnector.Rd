% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DataConnection.R, R/DatasetConnector.R
\docType{data}
\name{DatasetConnector}
\alias{DatasetConnector}
\alias{DataConnection}
\title{A \code{DataConnection} class of objects}
\format{An object of class \code{R6ClassGenerator} of length 24.}
\usage{
DataConnection

DatasetConnector
}
\arguments{
\item{args}{(\code{NULL} or named \code{list}) additional arguments not set up previously}

\item{silent}{(\code{logical}) whether convert all "missing function" errors to messages}

\item{try}{(\code{logical}) whether perform function evaluation inside \code{try} clause}

\item{deparse}{(\code{logical}) whether return deparsed form of a call}

\item{args}{(\code{NULL} or named \code{list}) additional arguments not set up previously}

\item{silent}{(\code{logical}) whether convert all "missing function" errors to messages}

\item{silent}{(\code{logical}) whether convert all "missing function" errors to messages}

\item{try}{(\code{logical}) whether perform function evaluation inside \code{try} clause}

\item{deparse}{(\code{logical}) whether return deparsed form of a call}

\item{silent}{(\code{logical}) whether convert all "missing function" errors to messages}

\item{fun}{(\code{CallableFunction}) function to open connection}

\item{args}{(\code{NULL} or named \code{list}) with values where list names are argument names}

\item{silent}{(\code{logical}) whether convert all "missing function" errors to messages}

\item{fun}{(\code{CallableFunction}) function to close connection}

\item{args}{(named \code{list}) with values where list names are argument names}

\item{silent}{(\code{logical}) whether convert all "missing function" errors to messages}

\item{deparse}{(\code{logical}) whether return deparsed form of a call}

\item{args}{(\code{NULL} or named \code{list}) additional dynamic arguments for pull function}

\item{silent}{(\code{logical}) whether convert all "missing function" errors to messages}

\item{args}{(\code{NULL} or named \code{list}) additional dynamic arguments for pull function}

\item{silent}{(\code{logical}) whether convert all "missing function" errors to messages}

\item{try}{(\code{logical}) whether perform function evaluation inside \code{try} clause}

\item{args}{(\code{NULL} or named \code{list}) additional dynamic arguments for pull function}

\item{silent}{(\code{logical}) whether convert all "missing function" errors to messages}

\item{try}{(\code{logical}) whether perform function evaluation inside \code{try} clause}

\item{dataname}{(\code{character}) dataname}

\item{keys}{(\code{list}) of keys}

\item{path}{(\code{character}) path}

\item{name}{(\code{character}) function argument name}

\item{value}{value to pass as a \code{name}}

\item{silent}{(\code{logical}) whether convert all "missing function" errors to messages}

\item{args}{(\code{NULL} or named \code{list}) with values where list names are argument names}

\item{silent}{(\code{logical}) whether convert all "missing function" errors to messages}

\item{fun}{(\code{CallableFunction}) function to pull the data

 @return nothing}
}
\value{
new \code{DataConnection} object

if \code{try = TRUE} then \code{try-error} on error, \code{NULL} otherwise

optionally deparsed \code{call} object

if \code{try = TRUE} then \code{try-error} on error, \code{NULL} otherwise

optionally deparsed \code{call} object

nothing

nothing

nothing

nothing

nothing

new \code{DatasetConnector} object

optionally deparsed \code{call} object

if \code{try = TRUE} then \code{try-error} on error, object returned from connection function

(\code{character}) connection data dataname

(\code{list}) of keys

(\code{character})

nothing, in order to get the data please use \code{get_data} method

nothing

nothing

nothing

nothing

nothing
}
\description{
Create a new \code{DataConnection} object

Open the connection.

Note that if the connection is already opened then it does nothing.

Get executed open connection call

Close the connection.

Get executed close connection call

Set open connection function

Set open connection function argument

Set close connection function

Set close connection function argument

Refresh both open and close calls

Create a new \code{DatasetConnector} object

Get executed call

Get the data from connection

Pull (if it is not already pulled) and return data

Get connection dataname

Get keys of the dataset

Get path of the dataset

Pull the data

Force execution of connection function

Set dataname

Set dataset keys

Set connection path

Set connection function single argument with value

Set connection function arguments with values

Set the pulling function, which itself defines the connection through which the data gets pulled.
}
\details{
Objects of this class store connection to data source.
It can be DB or server (\code{RICE} or \code{SAICE}) connection.

Objects of this class store connection function to single dataset. Note that for some specific connection type
(e.g. \code{RAICE} or \code{SAICE}), pre-requisite object of class \code{DataConnection} is required.
Data can be pulled via \code{pull} method and returned via \code{get_data} method.
}
\examples{
\dontrun{
open_fun <- CallableFunction$new(data.frame)  # define opening function
open_fun$set_args(list(x = 1:5))   # define fixed arguments to opening function

close_fun <- CallableFunction$new(print) # define closing function
close_fun$set_args(list(x = "Hi there"))  # define fixed arguments to closing function

x <- DataConnection$new() # define connection
x$set_open_fun(open_fun) # define opening function
x$set_close_fun(close_fun) # define closing function

x$set_open_args(args = list(y = letters[1:5])) # define additional arguments if necessary

x$open() # call opening function

x$open(args = list(x = 1:5, y = letters[1:5])) # able to call opening function with arguments

x$get_open_call() # check reroducible R code
# get data from connection via DataConnector$get_data()

x$close() # call closing function
}
}
\keyword{datasets}
