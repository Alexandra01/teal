% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RawDatasetConnector.R
\name{RawDatasetConnector}
\alias{RawDatasetConnector}
\title{A \code{RawDatasetConnector} class of objects}
\description{
A \code{RawDatasetConnector} class of objects

A \code{RawDatasetConnector} class of objects
}
\details{
Objects of this class store the connection function to fetch a single dataset.
Note that for some specific connection types (e.g. \code{RICE} or \code{SAICE}),
an object of class \code{DataConnection} must be provided.
Data can be pulled via the \code{pull} method and accessed directly
through the \code{dataset} active binding.
Pulled data inherits from the class \link{RelationalDataset}.
}
\examples{

## ------------------------------------------------
## Method `RawDatasetConnector$set_ui_input`
## ------------------------------------------------

ds <- raw_dataset_connector(pull_callable = callable_function(data.frame))
ds$set_ui_input(
  function(ns) {
    list(sliderInput(ns("colA"), "Select value for colA", min = 0, max = 10, value = 3),
         sliderInput(ns("colB"), "Select value for colB", min = 0, max = 10, value = 7))
  }
)
\dontrun{
ds$launch()
}

## ------------------------------------------------
## Method `RawDatasetConnector$launch`
## ------------------------------------------------

ds <- raw_dataset_connector(pull_callable = callable_function(data.frame))
ds$set_ui_input(
  function(ns) {
    list(sliderInput(ns("colA"), "Select value for colA", min = 0, max = 10, value = 3),
         sliderInput(ns("colB"), "Select value for colB", min = 0, max = 10, value = 7))
  }
)
\dontrun{
ds$launch()
}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{RawDatasetConnector$new()}}
\item \href{#method-set_args}{\code{RawDatasetConnector$set_args()}}
\item \href{#method-get_code}{\code{RawDatasetConnector$get_code()}}
\item \href{#method-get_code_class}{\code{RawDatasetConnector$get_code_class()}}
\item \href{#method-get_dataset}{\code{RawDatasetConnector$get_dataset()}}
\item \href{#method-get_error_message}{\code{RawDatasetConnector$get_error_message()}}
\item \href{#method-get_pull_callable}{\code{RawDatasetConnector$get_pull_callable()}}
\item \href{#method-get_raw_data}{\code{RawDatasetConnector$get_raw_data()}}
\item \href{#method-pull}{\code{RawDatasetConnector$pull()}}
\item \href{#method-is_failed}{\code{RawDatasetConnector$is_failed()}}
\item \href{#method-is_pulled}{\code{RawDatasetConnector$is_pulled()}}
\item \href{#method-set_ui_input}{\code{RawDatasetConnector$set_ui_input()}}
\item \href{#method-get_ui}{\code{RawDatasetConnector$get_ui()}}
\item \href{#method-get_server}{\code{RawDatasetConnector$get_server()}}
\item \href{#method-launch}{\code{RawDatasetConnector$launch()}}
\item \href{#method-clone}{\code{RawDatasetConnector$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new \code{RawDatasetConnector} object. Set the pulling function
\link{CallableFunction} which returns a \code{data.frame}, e.g. by reading
from a function or creating it on the fly.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RawDatasetConnector$new(pull_callable, vars = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pull_callable}}{(\code{CallableFunction})\cr
function to pull the data.}

\item{\code{vars}}{(list)\cr
In case when this object code depends on the \code{raw_data} from the other
\code{RelationalDataset}, \code{RelationalDatasetConnector} object(s) or other constant value,
this/these object(s) should be included}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
new \code{RawDatasetConnector} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_args"></a>}}
\if{latex}{\out{\hypertarget{method-set_args}{}}}
\subsection{Method \code{set_args()}}{
Set arguments to the pulling function
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RawDatasetConnector$set_args(args)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{args}}{(\code{NULL} or named \code{list}) dynamic arguments to function}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{self} invisibly for chaining
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_code"></a>}}
\if{latex}{\out{\hypertarget{method-get_code}{}}}
\subsection{Method \code{get_code()}}{
Get code to get data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RawDatasetConnector$get_code(deparse = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deparse}}{(\code{logical})\cr
whether return deparsed form of a call}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
optionally deparsed \code{call} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_code_class"></a>}}
\if{latex}{\out{\hypertarget{method-get_code_class}{}}}
\subsection{Method \code{get_code_class()}}{
Get internal \code{CodeClass} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RawDatasetConnector$get_code_class()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{CodeClass}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_dataset"></a>}}
\if{latex}{\out{\hypertarget{method-get_dataset}{}}}
\subsection{Method \code{get_dataset()}}{
Get dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RawDatasetConnector$get_dataset()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
dataset (\code{RawDataset})
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_error_message"></a>}}
\if{latex}{\out{\hypertarget{method-get_error_message}{}}}
\subsection{Method \code{get_error_message()}}{
Get error message from last pull
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RawDatasetConnector$get_error_message()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{try-error} object with error message or \code{character(0)} if last
 pull was successful.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_pull_callable"></a>}}
\if{latex}{\out{\hypertarget{method-get_pull_callable}{}}}
\subsection{Method \code{get_pull_callable()}}{
Get pull function
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RawDatasetConnector$get_pull_callable()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{CallableFunction}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_raw_data"></a>}}
\if{latex}{\out{\hypertarget{method-get_raw_data}{}}}
\subsection{Method \code{get_raw_data()}}{
Get raw data from dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RawDatasetConnector$get_raw_data()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{data.frame} data
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-pull"></a>}}
\if{latex}{\out{\hypertarget{method-pull}{}}}
\subsection{Method \code{pull()}}{
Pull the data

Read or create data using \code{pull_callable} specified in the constructor.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RawDatasetConnector$pull(args = NULL, try = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{args}}{(\code{NULL} or named \code{list})\cr
additional dynamic arguments for pull function. \code{args} can be omitted if \code{pull_callable}
from constructor already contains all necessary arguments to pull data. One can try
to execute \code{pull_callable} directly by \code{x$pull_callable$run()} or to get code using
\code{x$pull_callable$get_code()}. \code{args} specified in pull are used temporary to get data but
not saved in code.}

\item{\code{try}}{(\code{logical} value)\cr
whether perform function evaluation inside \code{try} clause}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{self} if successful or \code{try-error} if not.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-is_failed"></a>}}
\if{latex}{\out{\hypertarget{method-is_failed}{}}}
\subsection{Method \code{is_failed()}}{
Check if pull has not failed.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RawDatasetConnector$is_failed()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{TRUE} if pull failed, else \code{FALSE}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-is_pulled"></a>}}
\if{latex}{\out{\hypertarget{method-is_pulled}{}}}
\subsection{Method \code{is_pulled()}}{
Check if dataset has already been pulled.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RawDatasetConnector$is_pulled()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{TRUE} if connector has been already pulled, else \code{FALSE}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_ui_input"></a>}}
\if{latex}{\out{\hypertarget{method-set_ui_input}{}}}
\subsection{Method \code{set_ui_input()}}{
Sets the shiny UI according to the given inputs.
Inputs must provide only scalar (length of 1) variables.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RawDatasetConnector$set_ui_input(inputs = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{inputs}}{(\code{function}) A shiny module UI function with single argument \code{ns}.
This function needs to return a list of shiny inputs with their \code{inputId} wrapped
in function \code{ns}, see example.
Nested lists are not allowed.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{self} invisibly for chaining.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{ds <- raw_dataset_connector(pull_callable = callable_function(data.frame))
ds$set_ui_input(
  function(ns) {
    list(sliderInput(ns("colA"), "Select value for colA", min = 0, max = 10, value = 3),
         sliderInput(ns("colB"), "Select value for colB", min = 0, max = 10, value = 7))
  }
)
\dontrun{
ds$launch()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_ui"></a>}}
\if{latex}{\out{\hypertarget{method-get_ui}{}}}
\subsection{Method \code{get_ui()}}{
Get shiny ui function
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RawDatasetConnector$get_ui(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character}) namespace id}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
shiny UI in given namespace id
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_server"></a>}}
\if{latex}{\out{\hypertarget{method-get_server}{}}}
\subsection{Method \code{get_server()}}{
Get shiny server function
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RawDatasetConnector$get_server()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
shiny server function
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-launch"></a>}}
\if{latex}{\out{\hypertarget{method-launch}{}}}
\subsection{Method \code{launch()}}{
Launches a shiny app.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RawDatasetConnector$launch()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Shiny app
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{ds <- raw_dataset_connector(pull_callable = callable_function(data.frame))
ds$set_ui_input(
  function(ns) {
    list(sliderInput(ns("colA"), "Select value for colA", min = 0, max = 10, value = 3),
         sliderInput(ns("colB"), "Select value for colB", min = 0, max = 10, value = 7))
  }
)
\dontrun{
ds$launch()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RawDatasetConnector$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
