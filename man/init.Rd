% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/init.R
\name{init}
\alias{init}
\title{Create the Server and UI Function For the Shiny App}
\usage{
init(
  data,
  modules,
  filter_states = list(),
  header = tags$p("Add Title Here"),
  footer = tags$p("Add Footer Here"),
  id = character(0)
)
}
\arguments{
\item{data}{(\code{cdisc_data} or \code{DataConnector})
For \code{cdisc_data}: named list with datasets. Dataset names are case sensitive. The
\code{ADSL} data is mandatory.}

\item{modules}{nested list with one list per module with the
following named list elements:
\tabular{ll}{
\cr name \tab string with name shown in menu for the analysis item
\cr server \tab required, shiny server module function, see
\verb{\link[shiny]\{callModule\}} for more information
\cr ui \tab required, shiny ui module function, see
\verb{\link[shiny]\{callModule\}} for more information
\cr data \tab required, vector with datasets names that are passed
on (filtered) to the server function
\cr options \tab optional, other arguments passed on to the server
function
}}

\item{filter_states}{(\code{list}) You can define filters that show when
the app starts.
The general pattern is:
\code{list(ADSL = list(SEX = ..., AGE = ...), ADAE = ...)}.
An example is:
\code{list(ADSL = list(SEX = c("M", "F")))}.
More generally, the filters for the variable, e.g. \code{SEX} can be
specified as follows:
\code{list(SEX = list(choices = c("M", "F")))},
\code{list(SEX = list(choices = c("M", "F"), keep_na = TRUE))},
or equivalently with:
\code{list(SEX = c("M", "F"))},
\code{list(SEX = c("M", "F", NA))},
or for the default filter state (not very restrictive):
\code{list(SEX = default_filter_state())}

Instead of \code{choices} above, use the following names:
\itemize{
\item \code{numerical}: \code{range}
\item \code{factor}: \code{choices}
\item \code{logical}: \code{logical}
A general example is:
\code{list(   ADSL = list(AGE = default_filter_state(), SEX = c("M", NA)),   ADAE = list(AETOXGR = default_filter_state())   )}
Ignored if the app is restored from a bookmarked state.
}}

\item{header}{(\code{character} or \code{shiny.tag}) the header of the app}

\item{footer}{(\code{character} or \code{shiny.tag}) the footer of the app}

\item{id}{(\code{character}) module id to embed it, if provided,
the server function must be called with \code{callModule};
See the vignette for an example. However, \verb{\link{ui_teal_with_splash}}
is then preferred to this function.}
}
\value{
named list with server and ui function
}
\description{
End-users: This is the most important function for you to start a
teal app that is composed out of teal modules.
}
\details{
\strong{Notes for developers}:
This is a wrapper function around the \code{module_teal.R} functions. Unless you are
an end-user, don't use this function, but instead this module.
}
\examples{
library(random.cdisc.data)

ADSL <- radsl(cached = TRUE)

options(teal_logging = FALSE)

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", ADSL),
    code = "ADSL <- radsl(seed = 1)"
  ),
  modules = root_modules(
    module(
      "data source",
      server = function(input, output, session, datasets) {},
      ui = function(id, ...) div(p("information about data source")),
      filters = "all"
    ),
    module(
      "ADSL AGE histogram",
      server = function(input, output, session, datasets) {
        output$hist <- renderPlot(
          hist(datasets$get_data("ADSL", filtered = TRUE)$AGE)
        )
      },
      ui = function(id, ...) {
        ns <- NS(id)
        plotOutput(ns("hist"))
      },
      filters = "ADSL"
    )
  ),
  filter_states = list(ADSL = list(AGE = default_filter_state())),
  header = tags$h1("Sample App"),
  footer = tags$p("Copyright 2017 - 2020")
)
\dontrun{
shinyApp(app$ui, app$server)
# or: to also work with bookmarking
bookmarkableShinyApp(app$ui, app$server)
}

# See the vignette for an example how to embed this app as a module
# into a larger application
}
