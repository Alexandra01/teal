% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FilterState.R
\name{init_filter_state}
\alias{init_filter_state}
\title{Initializes \code{FilterState}}
\usage{
init_filter_state(
  x,
  varname,
  varlabel = if_null(attr(x, "label"), character(0)),
  input_dataname = NULL,
  use_dataname = FALSE
)
}
\arguments{
\item{x}{(\code{vector})\cr
values of the variable used in filter}

\item{varname}{(\code{character(1)}, \code{name})\cr
name of the variable}

\item{varlabel}{(\code{character(1)})\cr
label of the variable (optional).}

\item{input_dataname}{(\code{name} or \code{call})\cr
name of dataset where \code{x} is taken from}

\item{use_dataname}{(\code{logical(1)})\cr
whether to prefix condition calls with \verb{input_dataname$}.
For example \code{dataset$variable == "selection"}}
}
\value{
\code{FilterState} object
}
\description{
Initializes \code{FilterState} depending on a variable class.\cr
}
\examples{
filter_state <- teal:::RangeFilterState$new(
  c(1:10, NA, Inf),
  varname = "x",
  varlabel = "Pretty name",
  input_dataname = as.name("dataname"),
  use_dataname = TRUE
)

filter_state$get_varname()
filter_state$get_varlabel()
isolate(filter_state$get_call())

\dontrun{
shinyApp(
  ui = fluidPage(
    isolate(filter_state$ui(id = "app")),
    verbatimTextOutput("call")
  ),
  server = function(input, output, session) {
    callModule(filter_state$server, "app")

    output$call <- renderText(
      pdeparse(filter_state$get_call())
    )
  }
)
}
}
