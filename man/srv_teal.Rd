% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/module_teal.R
\name{srv_teal}
\alias{srv_teal}
\title{Server function corresponding to teal}
\usage{
srv_teal(input, output, session, modules, raw_data, filter = list())
}
\arguments{
\item{input}{\verb{Shiny input object}}

\item{output}{\verb{Shiny output object}}

\item{session}{\verb{Shiny session object}}

\item{modules}{\code{teal_module} or \code{teal_modules} object, the latter
can be used for nested tabs, see \verb{\link{ui_nested_tabs}}}

\item{raw_data}{\code{reactive} which returns the \code{RelationalData}, only evaluated once,
\code{NULL} value is ignored}

\item{filter}{(\code{list}) You can define filters that show when
the app starts. Variables inherited from ADSL have to be specified only for ADSL dataset.
Thus variable like RACE have to be specified for ADSL datasets even when other sets contain it too.
The general pattern is:
\code{list(ADSL = list(SEX = ..., AGE = ...), ADAE = ...)}.
An example is:
\code{list(ADSL = list(SEX = c("M", "F")))}.
More generally, the filters for the variable, e.g. \code{SEX} can be
specified as follows:
\code{list(SEX = list(choices = c("M", "F")))},
\code{list(SEX = list(choices = c("M", "F"), keep_na = TRUE))},
or equivalently with:
\code{list(SEX = c("M", "F"))},
\code{list(SEX = c("M", "F", NA))},
or for the default filter (not very restrictive):
\code{list(SEX = default_filter())}

Instead of \code{choices} above, use the following names:
\itemize{
\item \code{numerical}: \code{range}
\item \code{factor}: \code{choices}
\item \code{logical}: \code{logical}
A general example is:
\code{list(   ADSL = list(AGE = default_filter(), SEX = c("M", NA)),   ADAE = list(AETOXGR = default_filter())   )}
Ignored if the app is restored from a bookmarked state.
}}
}
\value{
\code{reactive} which returns the currently active module
}
\description{
It evaluates the \code{raw_data} (delayed data mechanism) and creates the
\code{datasets} object that is shared across modules.
Once it is ready and non-\code{NULL}, the splash screen is replaced by the
main teal UI that depends on the data.
The currently active tab is tracked and the right filter panel
updates the displayed datasets to filter for according to the active datanames
of the tab.
The initially displayed filter states can be provided, bookmarked filter
states always take precedence over them.
}
\details{
For more doc, see \verb{\link{ui_teal}}.
}
