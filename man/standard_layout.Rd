% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/standard_layout.R
\name{standard_layout}
\alias{standard_layout}
\title{Create a standard ui layout with output on the right and an encoding panel on
the left}
\usage{
standard_layout(output, encoding = NULL, forms = NULL,
  pre_output = NULL, post_output = NULL)
}
\arguments{
\item{output}{\code{shiny.tag} object with the output element (table, plot,
listing) such as for example returned by \code{\link[shiny]{plotOutput}}.}

\item{encoding}{a \code{shiny.tag} object containing the encoding elements.
If this element is \code{NULL} then no encoding side panel on the right is
created.}

\item{forms}{a \code{\link[shiny]{tagList}} of forms (e.g.
\code{\link[shiny]{actionButton}}) that are placed below the encodings panel}

\item{pre_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}

\item{post_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}
}
\value{
an object of class \code{shiny.tag} with the ui code.
}
\description{
This is the layout used for the teal modules in the \code{beam} package
}
\examples{

\dontrun{

ui_test <- function(id) {
 ns <- NS(id)
 standard_layout(
   output = plotOutput(ns("plot")),
   encoding = helpText("Ecoding Panel"),
   forms = tags$div(
      actionButton(ns("show_r_code"), "Show R Code"),
      actionButton(ns("export_plot"), "Export Plot")
   ),
   pre_output = helpText("This is a plot of the", tags$code("iris"), "data"),
   post_output = helpText("More information can be added here.")
 )
}

srv_test <- function(input, output, session) {
   output$plot <- renderPlot({
      with(iris, plot(Sepal.Length, Petal.Length, col = Species))
   })
}

ui_test2 <- function(id) {
 ns <- NS(id)
 standard_layout(
   output = plotOutput(ns("plot")),
   encoding = NULL,
   forms = tags$div(
      actionButton(ns("show_r_code"), "Show R Code"),
      actionButton(ns("export_plot"), "Export Plot")
   ),
   pre_output = helpText("This is a plot of the", tags$code("iris"), "data"),
   post_output = helpText("More information can be added here.")
 )
}

srv_test2 <- function(input, output, session) {
   output$plot <- renderPlot({
      with(iris, plot(Sepal.Length, Petal.Length, col = Species))
   })
}

x <- teal::init(
   data = list(ASL = generate_sample_data('ASL')),
   modules = root_modules(
      module(
         "example",
         ui = ui_test,
         server = srv_test,
         filters = "ASL"
      ),
      module(
         "example no encoding",
         ui = ui_test2,
         server = srv_test2,
         filters = "ASL"
      )
   )
)

shinyApp(x$ui, x$server)

}

}
