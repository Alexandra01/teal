% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/module_add_filter_variable.R
\name{ui_add_filter_variable}
\alias{ui_add_filter_variable}
\title{UI to select among the column names of a dataset to add as a filter variable}
\usage{
ui_add_filter_variable(id, dataname)
}
\arguments{
\item{id}{module id}

\item{dataname}{name of dataset whose columns should be filtered}
}
\description{
Once something is selected, it sets the \code{filter_state} (from inexistent) to \code{NULL}
for that variable in the \code{datasets} object. This essentially makes it available
for filtering.
Indeed, the top right panel (see \verb{\link{module_filter_items}}) picks this up,
so you can adjust the filtering for that variable. The selection is then undone and
the choices are updated, so other variables can be added for filtering.
Variables that cannot be filtered are not available in the selection.
}
\examples{
library(random.cdisc.data)
library(dplyr)

ADSL <- radsl(cached = TRUE)
attr(ADSL, "keys") <- get_cdisc_keys("ADSL")
ADAE <- radlb(cached = TRUE)
attr(ADAE, "keys") <- get_cdisc_keys("ADAE")

datasets <- teal:::FilteredData$new()
# these filters will no longer be available for selection
isolate({
  datasets$set_data("ADSL", ADSL)
  datasets$set_filter_state("ADSL", list(
    AGE = list(range = c(33, 44), keep_na = FALSE),
    SEX = list(choices = "M", keep_na = TRUE)
  ))
  datasets$set_data("ADAE", ADAE)
  datasets$set_filter_state("ADAE", list(
    CHG = list(range = c(20, 35), keep_na = FALSE)
  ))
})

app <- shinyApp(ui = function() {
  fluidPage(
    teal:::include_teal_css_js(),
    teal:::ui_add_filter_variable("filter_ADSL", "ADSL"),
    teal:::ui_add_filter_variable("filter_ADAE", "ADAE"),
    p("The following variables are filtered:"),
    verbatimTextOutput("info")
  )
}, server = function(input, output, session) {
  callModule(teal:::srv_add_filter_variable, "filter_ADSL", datasets, "ADSL")
  callModule(
    teal:::srv_add_filter_variable, "filter_ADAE", datasets, "ADAE",
    omit_vars = reactive(colnames(datasets$get_data("ADSL", filtered = FALSE)))
  )
  output$info <- renderText({
    paste0(
      datasets$datanames(), ": ",
      lapply(
        datasets$datanames(),
        function(dataname) toString(names(datasets$get_filter_state(dataname)))
       ),
      collapse = "\n"
    )
  })
})
\dontrun{
runApp(app)
}
}
