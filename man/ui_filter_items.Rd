% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/module_filter_items.R
\name{ui_filter_items}
\alias{ui_filter_items}
\title{Creates UI to show currently selected filters that can be applied to
a single dataset, i.e. all columns selected for filtering are shown.}
\usage{
ui_filter_items(id, dataname)
}
\arguments{
\item{id}{module id}

\item{dataname}{\code{character} dataname to show filters for}
}
\description{
It reacts to changes in the filter variable names as provided by
the \code{datasets} class. To filter a new variable, it is added to the
filter state in the \code{datasets} class. This then triggers this module
to insert a corresponding UI based on the filter state and filter info.
Once the variable is removed, it is removed from the UI as well.
}
\details{
Note: Any changes to the filter state and filter info while this element is
visible in the UI are not reflected in the UI. To achieve this, you have to
remove the element from the filtered states in \code{datasets} and then add it
again. While doing this, it is good practice to make the UI element for this
variable invisible (e.g. with \code{shinyjs::hide}) as otherwise there will be two
triggerings of the input reactives of the servers, first the one corresponding
to user changes to the inputs while the UI was updated, then the correct new
input values (as sent with the new UI).
}
\examples{
# Example with ADSL and ADAE dataset
library(random.cdisc.data)
library(dplyr)

ADSL <- radsl(cached = TRUE)
attr(ADSL, "keys") <- get_cdisc_keys("ADSL")
ADAE <- radlb(cached = TRUE)
attr(ADAE, "keys") <- get_cdisc_keys("ADAE")

datasets <- teal:::FilteredData$new()
isolate({
  datasets$set_data("ADSL", ADSL)
  datasets$set_filter_state("ADSL", list(
    AGE = list(range = c(33, 44), keep_na = FALSE),
    SEX = list(choices = "M", keep_na = TRUE)
  ))
  datasets$set_data("ADAE", ADAE)
  datasets$set_filter_state("ADAE", list(
    CHG = list(range = c(20, 35), keep_na = FALSE)
  ))
})

app <- shinyApp(ui = function() {
  tagList(
    teal:::include_teal_css_js(),
    teal:::ui_filter_items("filter_ADSL", "ADSL"),
    teal:::ui_filter_items("filter_ADAE", "ADAE")
  )
}, server = function(input, output, session) {
  callModule(teal:::srv_filter_items, "filter_ADSL", datasets, "ADSL")
  callModule(teal:::srv_filter_items, "filter_ADAE", datasets, "ADAE")
})
\dontrun{
runApp(app)
}
}
